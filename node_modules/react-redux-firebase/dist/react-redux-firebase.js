/*! react-redux-firebase.js v2.5.1 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("prop-types"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "prop-types"], factory);
	else if(typeof exports === 'object')
		exports["ReactReduxFirebase"] = factory(require("react"), require("prop-types"));
	else
		root["ReactReduxFirebase"] = factory(root["React"], root["PropTypes"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_23__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 90);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var actionsPrefix = exports.actionsPrefix = '@@reactReduxFirebase';

var actionTypes = exports.actionTypes = {
  START: actionsPrefix + '/START',
  SET: actionsPrefix + '/SET',
  REMOVE: actionsPrefix + '/REMOVE',
  MERGE: actionsPrefix + '/MERGE',
  SET_PROFILE: actionsPrefix + '/SET_PROFILE',
  LOGIN: actionsPrefix + '/LOGIN',
  LOGOUT: actionsPrefix + '/LOGOUT',
  LOGIN_ERROR: actionsPrefix + '/LOGIN_ERROR',
  NO_VALUE: actionsPrefix + '/NO_VALUE',
  UNAUTHORIZED_ERROR: actionsPrefix + '/UNAUTHORIZED_ERROR',
  ERROR: actionsPrefix + '/ERROR',
  CLEAR_ERRORS: actionsPrefix + '/CLEAR_ERRORS',
  SET_LISTENER: actionsPrefix + '/SET_LISTENER',
  UNSET_LISTENER: actionsPrefix + '/UNSET_LISTENER',
  AUTHENTICATION_INIT_STARTED: actionsPrefix + '/AUTHENTICATION_INIT_STARTED',
  AUTHENTICATION_INIT_FINISHED: actionsPrefix + '/AUTHENTICATION_INIT_FINISHED',
  SESSION_START: actionsPrefix + '/SESSION_START',
  SESSION_END: actionsPrefix + '/SESSION_END',
  FILE_UPLOAD_START: actionsPrefix + '/FILE_UPLOAD_START',
  FILE_UPLOAD_ERROR: actionsPrefix + '/FILE_UPLOAD_ERROR',
  FILE_UPLOAD_PROGRESS: actionsPrefix + '/FILE_UPLOAD_PROGRESS',
  FILE_UPLOAD_COMPLETE: actionsPrefix + '/FILE_UPLOAD_COMPLETE',
  FILE_DELETE_START: actionsPrefix + '/FILE_DELETE_START',
  FILE_DELETE_ERROR: actionsPrefix + '/FILE_DELETE_ERROR',
  FILE_DELETE_COMPLETE: actionsPrefix + '/FILE_DELETE_COMPLETE',
  AUTH_UPDATE_START: actionsPrefix + '/AUTH_UPDATE_START',
  AUTH_UPDATE_SUCCESS: actionsPrefix + '/AUTH_UPDATE_SUCCESS',
  AUTH_UPDATE_ERROR: actionsPrefix + '/AUTH_UPDATE_ERROR',
  PROFILE_UPDATE_START: actionsPrefix + '/PROFILE_UPDATE_START',
  PROFILE_UPDATE_SUCCESS: actionsPrefix + '/PROFILE_UPDATE_SUCCESS',
  PROFILE_UPDATE_ERROR: actionsPrefix + '/PROFILE_UPDATE_ERROR',
  EMAIL_UPDATE_START: actionsPrefix + '/EMAIL_UPDATE_START',
  EMAIL_UPDATE_SUCCESS: actionsPrefix + '/EMAIL_UPDATE_SUCCESS',
  EMAIL_UPDATE_ERROR: actionsPrefix + '/EMAIL_UPDATE_ERROR',
  AUTH_RELOAD_START: actionsPrefix + '/AUTH_RELOAD_START',
  AUTH_RELOAD_ERROR: actionsPrefix + '/AUTH_RELOAD_ERROR',
  AUTH_RELOAD_SUCCESS: actionsPrefix + '/AUTH_RELOAD_SUCCESS',
  AUTH_LINK_START: actionsPrefix + '/AUTH_LINK_START',
  AUTH_LINK_ERROR: actionsPrefix + '/AUTH_LINK_ERROR',
  AUTH_LINK_SUCCESS: actionsPrefix + '/AUTH_LINK_SUCCESS',
  AUTH_EMPTY_CHANGE: actionsPrefix + '/AUTH_EMPTY_CHANGE'
};

var defaultConfig = exports.defaultConfig = {
  userProfile: null,
  presence: null,
  sessions: 'sessions',
  enableLogging: false,
  logErrors: true,
  preserveOnLogout: null,
  preserveOnEmptyAuthChange: null,
  resetBeforeLogin: true,
  updateProfileOnLogin: true,
  enableRedirectHandling: true,
  autoPopulateProfile: false,
  setProfilePopulateResults: false,
  dispatchOnUnsetListener: true,
  dispatchRemoveAction: false,
  enableEmptyAuthChanges: true,
  firebaseStateName: 'firebase',
  attachAuthIsReady: false,
  keysToRemoveFromAuth: ['appName', 'apiKey', 'authDomain', 'redirectEventId', 'stsTokenManager', 'uid'],
  keysToPreserveFromProviderData: ['email', 'phoneNumber', 'photoURL', 'providerId', 'uid']
};

var supportedAuthProviders = exports.supportedAuthProviders = ['google', 'github', 'twitter', 'facebook'];

var topLevelPaths = exports.topLevelPaths = ['auth', 'profile', 'ordered', 'data'];

var v3ErrorMessage = exports.v3ErrorMessage = 'Context from react-redux not found. If you are using react-redux v6 a v3.*.* version of react-redux-firebase is required. Please checkout the v3 migration guide: http://bit.ly/2SRNdiO';

exports.default = {
  actionTypes: actionTypes,
  defaultConfig: defaultConfig
};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObject = __webpack_require__(2);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isArray = __webpack_require__(0),
    isObjectLike = __webpack_require__(4);

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(0),
    isKey = __webpack_require__(94),
    stringToPath = __webpack_require__(53),
    toString = __webpack_require__(10);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToDate = exports.wrapDisplayName = exports.getDisplayName = exports.createCallable = exports.getEventsFromInput = undefined;

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _events = __webpack_require__(91);

Object.defineProperty(exports, 'getEventsFromInput', {
  enumerable: true,
  get: function get() {
    return _events.getEventsFromInput;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createCallable = exports.createCallable = function createCallable(f) {
  return (0, _isFunction3.default)(f) ? f : function () {
    return f;
  };
};

var getDisplayName = exports.getDisplayName = function getDisplayName(Component) {
  if (typeof Component === 'string') {
    return Component;
  }

  if (!Component) {
    return undefined;
  }

  return Component.displayName || Component.name || 'Component';
};

var wrapDisplayName = exports.wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
  return hocName + '(' + getDisplayName(BaseComponent) + ')';
};

var stringToDate = exports.stringToDate = function stringToDate(strInput) {
  try {
    return new Date(JSON.parse(strInput));
  } catch (err) {
    console.error('Error parsing string to date:', err.message || err);
    return strInput;
  }
};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(101);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promisesForPopulate = exports.populateList = exports.getPopulateChild = exports.getPopulates = exports.getPopulateObjs = exports.getChildType = exports.getPopulateObj = undefined;

var _some2 = __webpack_require__(31);

var _some3 = _interopRequireDefault(_some2);

var _has2 = __webpack_require__(55);

var _has3 = _interopRequireDefault(_has2);

var _set2 = __webpack_require__(56);

var _set3 = _interopRequireDefault(_set2);

var _forEach2 = __webpack_require__(35);

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = __webpack_require__(16);

var _get3 = _interopRequireDefault(_get2);

var _map2 = __webpack_require__(13);

var _map3 = _interopRequireDefault(_map2);

var _isObject2 = __webpack_require__(2);

var _isObject3 = _interopRequireDefault(_isObject2);

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _isString2 = __webpack_require__(5);

var _isString3 = _interopRequireDefault(_isString2);

var _filter2 = __webpack_require__(57);

var _filter3 = _interopRequireDefault(_filter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getPopulateObj = exports.getPopulateObj = function getPopulateObj(str) {
  if (!(0, _isString3.default)(str)) {
    return str;
  }
  var strArray = str.split(':');

  return { child: strArray[0], root: strArray[1] };
};
var getChildType = exports.getChildType = function getChildType(child) {
  if ((0, _isString3.default)(child)) {
    return 'string';
  }
  if ((0, _isArray3.default)(child)) {
    return 'array';
  }
  if ((0, _isObject3.default)(child)) {
    return 'object';
  }
  return 'other';
};

var getPopulateObjs = exports.getPopulateObjs = function getPopulateObjs(arr) {
  if (!(0, _isArray3.default)(arr)) {
    return arr;
  }
  return arr.map(function (o) {
    return (0, _isObject3.default)(o) ? o : getPopulateObj(o);
  });
};

var getPopulates = exports.getPopulates = function getPopulates(params) {
  var populates = (0, _filter3.default)(params, function (param) {
    return param.indexOf('populate') !== -1 || (0, _isObject3.default)(param) && param.populates;
  }).map(function (p) {
    return p.split('=')[1];
  });

  if (!populates.length) {
    return null;
  }
  return populates.map(getPopulateObj);
};

var getPopulateChild = exports.getPopulateChild = function getPopulateChild(firebase, populate, id) {
  return firebase.database().ref().child(populate.root + '/' + id).once('value').then(function (snap) {
    return snap.val();
  });
};

var populateList = exports.populateList = function populateList(firebase, list, p, results) {
  if (!results[p.root]) {
    (0, _set3.default)(results, p.root, {});
  }
  return Promise.all((0, _map3.default)(list, function (id, childKey) {
    var populateKey = id === true || p.populateByKey ? childKey : id;
    return getPopulateChild(firebase, p, populateKey).then(function (pc) {
      if (pc) {
        return (0, _set3.default)(results, p.root + '.' + populateKey, pc);
      }
      return results;
    });
  }));
};

var promisesForPopulate = exports.promisesForPopulate = function promisesForPopulate(firebase, dataKey, originalData, populatesIn) {
  var promisesArray = [];
  var results = {};

  var populatesForData = getPopulateObjs((0, _isFunction3.default)(populatesIn) ? populatesIn(dataKey, originalData) : populatesIn);

  var dataHasPopulateChilds = (0, _some3.default)(populatesForData, function (populate) {
    return (0, _has3.default)(originalData, populate.child);
  });

  if (dataHasPopulateChilds) {
    (0, _forEach3.default)(populatesForData, function (p) {
      if ((0, _isString3.default)((0, _get3.default)(originalData, p.child))) {
        return promisesArray.push(getPopulateChild(firebase, p, (0, _get3.default)(originalData, p.child)).then(function (v) {
          if (v) {
            (0, _set3.default)(results, p.root + '.' + (0, _get3.default)(originalData, p.child), v);
          }
        }));
      }

      return promisesArray.push(populateList(firebase, (0, _get3.default)(originalData, p.child), p, results));
    });
  } else {
    (0, _forEach3.default)(originalData, function (d, key) {
      var populatesForDataItem = getPopulateObj((0, _isFunction3.default)(populatesIn) ? populatesIn(key, d) : populatesIn);

      (0, _forEach3.default)(populatesForDataItem, function (p) {
        var idOrList = (0, _get3.default)(d, p.child);

        if (!idOrList) {
          return;
        }

        if ((0, _isString3.default)(idOrList)) {
          return promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {
            if (v) {
              (0, _set3.default)(results, p.root + '.' + idOrList, v);
            }
            return results;
          }));
        }

        if ((0, _isArray3.default)(idOrList) || (0, _isObject3.default)(idOrList)) {
          return promisesArray.push(populateList(firebase, idOrList, p, results));
        }
      });
    });
  }

  return Promise.all(promisesArray).then(function () {
    return results;
  });
};

exports.default = { promisesForPopulate: promisesForPopulate };

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(103);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(27);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(33),
    baseAssignValue = __webpack_require__(15);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(34);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 21 */
/***/ (function(module, exports) {

/**
 * The default argument placeholder value for methods.
 *
 * @type {Object}
 */
module.exports = {};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_22__;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_23__;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var ReactIs = __webpack_require__(185);
var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};

var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};

var TYPE_STATICS = {};
TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;

function getStatics(component) {
    if (ReactIs.isMemo(component)) {
        return MEMO_STATICS;
    }
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(7),
    last = __webpack_require__(26),
    parent = __webpack_require__(96),
    toKey = __webpack_require__(11);

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;


/***/ }),
/* 26 */
/***/ (function(module, exports) {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(7),
    toKey = __webpack_require__(11);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(98),
    isFlattenable = __webpack_require__(99);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;


/***/ }),
/* 30 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 31 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(33),
    castPath = __webpack_require__(7),
    isIndex = __webpack_require__(28),
    isObject = __webpack_require__(2),
    toKey = __webpack_require__(11);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(15),
    eq = __webpack_require__(34);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 34 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(59),
    getTag = __webpack_require__(37),
    isArrayLike = __webpack_require__(38),
    isString = __webpack_require__(5),
    stringSize = __webpack_require__(105);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }
  var tag = getTag(collection);
  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }
  return baseKeys(collection).length;
}

module.exports = size;


/***/ }),
/* 37 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(3),
    isLength = __webpack_require__(60);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(17);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var basePick = __webpack_require__(113),
    flatRest = __webpack_require__(42);

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(117),
    overRest = __webpack_require__(67),
    setToString = __webpack_require__(68);

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;


/***/ }),
/* 43 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),
/* 44 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    getPrototype = __webpack_require__(70),
    isObjectLike = __webpack_require__(4);

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(121),
    overRest = __webpack_require__(67),
    setToString = __webpack_require__(68);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recursiveUnset = exports.preserveValuesFromState = exports.combineReducers = undefined;

var _unset2 = __webpack_require__(140);

var _unset3 = _interopRequireDefault(_unset2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _pick2 = __webpack_require__(41);

var _pick3 = _interopRequireDefault(_pick2);

var _isBoolean2 = __webpack_require__(157);

var _isBoolean3 = _interopRequireDefault(_isBoolean2);

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _size2 = __webpack_require__(36);

var _size3 = _interopRequireDefault(_size2);

var _replace2 = __webpack_require__(158);

var _replace3 = _interopRequireDefault(_replace2);

var _get2 = __webpack_require__(16);

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.pathToArr = pathToArr;
exports.getSlashStrPath = getSlashStrPath;
exports.getDotStrPath = getDotStrPath;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pathToArr(path) {
  return path ? path.split(/\//).filter(function (p) {
    return !!p;
  }) : [];
}

function getSlashStrPath(path) {
  return pathToArr(path).join('/');
}

function getDotStrPath(path) {
  return pathToArr(path).join('.');
}

var combineReducers = exports.combineReducers = function combineReducers(reducers) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];
    return Object.keys(reducers).reduce(function (nextState, key) {
      nextState[key] = reducers[key](state[key], action);
      return nextState;
    }, {});
  };
};

var preserveValuesFromState = exports.preserveValuesFromState = function preserveValuesFromState(state, preserveSetting, nextState) {
  if ((0, _isFunction3.default)(preserveSetting)) {
    return preserveSetting(state, nextState);
  }

  if ((0, _isBoolean3.default)(preserveSetting) && preserveSetting) {
    return nextState ? _extends({}, state, nextState) : state;
  }

  if ((0, _isArray3.default)(preserveSetting)) {
    return (0, _pick3.default)(state, preserveSetting);
  }

  throw new Error('Invalid preserve parameter. It must be an Object or an Array');
};

var recursiveUnset = exports.recursiveUnset = function recursiveUnset(path, obj) {
  var isRecursiveCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!path) {
    return obj;
  }

  if ((0, _size3.default)((0, _get3.default)(obj, path)) > 0 && isRecursiveCall) {
    return obj;
  }

  var objectWithRemovedKey = (0, _unset3.default)(path, obj);
  var newPath = path.match(/\./) ? (0, _replace3.default)(path, /\.[^.]*$/, '') : '';
  return recursiveUnset(newPath, objectWithRemovedKey, true);
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var baseConvert = __webpack_require__(141),
    util = __webpack_require__(143);

/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */
function convert(name, func, options) {
  return baseConvert(util, name, func, options);
}

module.exports = convert;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(43),
    createCtor = __webpack_require__(145),
    root = __webpack_require__(12);

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

module.exports = createPartial;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateProfileOnFirestore = exports.updateProfileOnRTDB = exports.createAuthIsReady = exports.authIsReady = exports.getLoginMethodAndParams = undefined;

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = __webpack_require__(5);

var _isString3 = _interopRequireDefault(_isString2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _capitalize2 = __webpack_require__(159);

var _capitalize3 = _interopRequireDefault(_capitalize2);

exports.setupPresence = setupPresence;

var _constants = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createAuthProvider = function createAuthProvider(firebase, providerName, scopes) {
  var capitalProviderName = (0, _capitalize3.default)(providerName) + 'AuthProvider';

  if (!firebase.auth[capitalProviderName]) {
    throw new Error(providerName + ' is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.');
  }

  var provider = new firebase.auth[capitalProviderName]();

  var customAuthParameters = firebase._.config.customAuthParameters;

  if (customAuthParameters && customAuthParameters[providerName]) {
    provider.setCustomParameters(customAuthParameters[providerName]);
  }

  if (providerName.toLowerCase() === 'twitter' || !(0, _isFunction3.default)(provider.addScope)) {
    return provider;
  }

  provider.addScope('email');

  if (scopes) {
    if ((0, _isArray3.default)(scopes)) {
      scopes.forEach(function (scope) {
        provider.addScope(scope);
      });
    }
    if ((0, _isString3.default)(scopes)) {
      provider.addScope(scopes);
    }
  }

  return provider;
};

var getLoginMethodAndParams = exports.getLoginMethodAndParams = function getLoginMethodAndParams(firebase, creds) {
  var email = creds.email,
      password = creds.password,
      provider = creds.provider,
      type = creds.type,
      token = creds.token,
      scopes = creds.scopes,
      phoneNumber = creds.phoneNumber,
      applicationVerifier = creds.applicationVerifier,
      credential = creds.credential;

  if (credential) {
    var credentialAuth = firebase.auth().signInAndRetrieveDataWithCredential;

    if (credentialAuth) {
      return {
        method: 'signInAndRetrieveDataWithCredential',
        params: [credential]
      };
    }
    return { method: 'signInWithCredential', params: [credential] };
  }

  if (provider) {
    if (_constants.supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {
      throw new Error(provider + ' is not a valid Auth Provider');
    }
    if (token) {
      throw new Error('provider with token no longer supported, use credential parameter instead');
    }
    var authProvider = createAuthProvider(firebase, provider, scopes);
    if (type === 'popup') {
      return { method: 'signInWithPopup', params: [authProvider] };
    }
    return { method: 'signInWithRedirect', params: [authProvider] };
  }

  if (token) {
    var tokenAuth = firebase.auth().signInAndRetrieveDataWithCustomToken;

    if (tokenAuth) {
      return { method: 'signInAndRetrieveDataWithCustomToken', params: [token] };
    }

    return { method: 'signInWithCustomToken', params: [token] };
  }

  if (phoneNumber) {
    if (!applicationVerifier) {
      throw new Error('Application verifier is required for phone authentication');
    }
    return {
      method: 'signInWithPhoneNumber',
      params: [phoneNumber, applicationVerifier]
    };
  }

  if (!firebase.auth().signInWithEmailAndPassword) {
    return {
      method: 'signInAndRetrieveDataWithEmailAndPassword',
      params: [email, password]
    };
  }

  return { method: 'signInWithEmailAndPassword', params: [email, password] };
};

var isAuthReady = function isAuthReady(store, stateName) {
  var state = store.getState();
  var firebaseState = stateName ? state[stateName] : state;
  var firebaseAuthState = firebaseState && firebaseState.auth;
  if (!firebaseAuthState) {
    throw new Error('The Firebase auth state could not be found in the store under the attribute \'' + (stateName ? stateName + '.' : '') + 'auth\'. Make sure your react-redux-firebase reducer is correctly set in the store');
  }
  return firebaseState.auth.isLoaded;
};

var authIsReady = exports.authIsReady = function authIsReady(store) {
  var stateName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'firebase';
  return new Promise(function (resolve) {
    if (isAuthReady(store, stateName)) {
      resolve();
    } else {
      var unsubscribe = store.subscribe(function () {
        if (isAuthReady(store, stateName)) {
          unsubscribe();
          resolve();
        }
      });
    }
  });
};

var createAuthIsReady = exports.createAuthIsReady = function createAuthIsReady(store, config) {
  return (0, _isFunction3.default)(config.authIsReady) ? config.authIsReady(store, config) : authIsReady(store, config.firebaseStateName);
};

var updateProfileOnRTDB = exports.updateProfileOnRTDB = function updateProfileOnRTDB(firebase, profileUpdate) {
  var database = firebase.database,
      _firebase$_ = firebase._,
      config = _firebase$_.config,
      authUid = _firebase$_.authUid;

  var profileRef = database().ref(config.userProfile + '/' + authUid);
  return profileRef.update(profileUpdate).then(function () {
    return profileRef.once('value');
  });
};

var updateProfileOnFirestore = exports.updateProfileOnFirestore = function updateProfileOnFirestore(firebase, profileUpdate) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$useSet = options.useSet,
      useSet = _options$useSet === undefined ? true : _options$useSet,
      _options$merge = options.merge,
      merge = _options$merge === undefined ? true : _options$merge;
  var firestore = firebase.firestore,
      _firebase$_2 = firebase._,
      config = _firebase$_2.config,
      authUid = _firebase$_2.authUid;

  var profileRef = firestore().doc(config.userProfile + '/' + authUid);

  var profileUpdatePromise = useSet ? profileRef.set(profileUpdate, { merge: merge }) : profileRef.update(profileUpdate);
  return profileUpdatePromise.then(function () {
    return profileRef.get();
  });
};

function setupPresence(dispatch, firebase) {
  if (!firebase.database || !firebase.database.ServerValue) {
    return;
  }
  var ref = firebase.database().ref();
  var _firebase$_3 = firebase._,
      _firebase$_3$config = _firebase$_3.config,
      presence = _firebase$_3$config.presence,
      sessions = _firebase$_3$config.sessions,
      authUid = _firebase$_3.authUid;

  var amOnline = ref.child('.info/connected');
  var onlineRef = ref.child((0, _isFunction3.default)(presence) ? presence(firebase.auth().currentUser, firebase) : presence).child(authUid);
  var sessionsRef = (0, _isFunction3.default)(sessions) ? sessions(firebase.auth().currentUser, firebase) : sessions;
  if (sessionsRef) {
    sessionsRef = ref.child(sessions);
  }
  amOnline.on('value', function (snapShot) {
    if (!snapShot.val()) return;

    if (sessionsRef) {
      dispatch({ type: _constants.actionTypes.SESSION_START, payload: authUid });

      var session = sessionsRef.push({
        startedAt: firebase.database.ServerValue.TIMESTAMP,
        user: authUid
      });

      if ((0, _isFunction3.default)(session.setPriority)) {
        session.setPriority(authUid);
      }
      session.child('endedAt').onDisconnect().set(firebase.database.ServerValue.TIMESTAMP, function () {
        dispatch({ type: _constants.actionTypes.SESSION_END });
      });
    }

    onlineRef.set(true);
    onlineRef.onDisconnect().remove();
  });
}

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFirebaseInstance = undefined;

var _isObject2 = __webpack_require__(2);

var _isObject3 = _interopRequireDefault(_isObject2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = __webpack_require__(8);

var _actions = __webpack_require__(62);

var _actions2 = __webpack_require__(65);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createFirebaseInstance = exports.createFirebaseInstance = function createFirebaseInstance(firebase, configs, dispatch) {
  if (configs.enableLogging && firebase.database && typeof firebase.database.enableLogging === 'function') {
    firebase.database.enableLogging(configs.enableLogging);
  }

  var defaultInternals = {
    watchers: {},
    listeners: {},
    callbacks: {},
    queries: {},
    config: configs,
    authUid: null
  };

  Object.defineProperty(firebase, '_', {
    value: defaultInternals,
    writable: true,
    enumerable: true,
    configurable: true
  });

  var withMeta = function withMeta(method, path, value, onComplete) {
    if ((0, _isObject3.default)(value)) {
      var prefix = method === 'update' ? 'updated' : 'created';
      var dataWithMeta = _extends({}, value, _defineProperty({}, prefix + 'At', firebase.database.ServerValue.TIMESTAMP));
      if (firebase.auth().currentUser) {
        dataWithMeta[prefix + 'By'] = firebase.auth().currentUser.uid;
      }
      return firebase.database().ref(path)[method](dataWithMeta, onComplete);
    }
    return firebase.database().ref(path)[method](value, onComplete);
  };

  var set = function set(path, value, onComplete) {
    return firebase.database().ref(path).set(value, onComplete);
  };

  var setWithMeta = function setWithMeta(path, value, onComplete) {
    return withMeta('set', path, value, onComplete);
  };

  var push = function push(path, value, onComplete) {
    return firebase.database().ref(path).push(value, onComplete);
  };

  var pushWithMeta = function pushWithMeta(path, value, onComplete) {
    return withMeta('push', path, value, onComplete);
  };

  var update = function update(path, value, onComplete) {
    return firebase.database().ref(path).update(value, onComplete);
  };

  var updateWithMeta = function updateWithMeta(path, value, onComplete) {
    return withMeta('update', path, value, onComplete);
  };

  var remove = function remove(path, onComplete, options) {
    return _actions2.queryActions.remove(firebase, dispatch, path, options).then(function () {
      if (typeof onComplete === 'function') onComplete();
      return path;
    });
  };

  var uniqueSet = function uniqueSet(path, value, onComplete) {
    return firebase.database().ref(path).transaction(function (d) {
      return d === null ? value : undefined;
    }).then(function (_ref) {
      var committed = _ref.committed,
          snapshot = _ref.snapshot;

      if (!committed) {
        var newError = new Error('Path already exists.');
        if (onComplete) onComplete(newError);
        return Promise.reject(newError);
      }
      if (onComplete) onComplete(snapshot);
      return snapshot;
    });
  };

  var uploadFile = function uploadFile(path, file, dbPath, options) {
    return _actions2.storageActions.uploadFile(dispatch, firebase, {
      path: path,
      file: file,
      dbPath: dbPath,
      options: options
    });
  };

  var uploadFiles = function uploadFiles(path, files, dbPath, options) {
    return _actions2.storageActions.uploadFiles(dispatch, firebase, {
      path: path,
      files: files,
      dbPath: dbPath,
      options: options
    });
  };

  var deleteFile = function deleteFile(path, dbPath) {
    return _actions2.storageActions.deleteFile(dispatch, firebase, { path: path, dbPath: dbPath });
  };

  var watchEvent = function watchEvent(type, path, storeAs) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return _actions2.queryActions.watchEvent(firebase, dispatch, _extends({
      type: type,
      path: path,
      storeAs: storeAs
    }, options));
  };

  var unWatchEvent = function unWatchEvent(type, path, queryId) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return _actions2.queryActions.unWatchEvent(firebase, dispatch, _extends({
      type: type,
      path: path,
      queryId: queryId
    }, options));
  };

  var promiseEvents = function promiseEvents(watchArray, options) {
    var inputAsFunc = (0, _utils.createCallable)(watchArray);
    var prevData = inputAsFunc(options, firebase);
    var queryConfigs = (0, _utils.getEventsFromInput)(prevData);

    return Promise.all(queryConfigs.map(function (queryConfig) {
      return _actions2.queryActions.watchEvent(firebase, dispatch, queryConfig);
    }));
  };

  var login = function login(credentials) {
    return _actions2.authActions.login(dispatch, firebase, credentials);
  };

  var logout = function logout() {
    return _actions2.authActions.logout(dispatch, firebase);
  };

  var createUser = function createUser(credentials, profile) {
    return _actions2.authActions.createUser(dispatch, firebase, credentials, profile);
  };

  var resetPassword = function resetPassword(credentials) {
    return _actions2.authActions.resetPassword(dispatch, firebase, credentials);
  };

  var confirmPasswordReset = function confirmPasswordReset(code, password) {
    return _actions2.authActions.confirmPasswordReset(dispatch, firebase, code, password);
  };

  var verifyPasswordResetCode = function verifyPasswordResetCode(code) {
    return _actions2.authActions.verifyPasswordResetCode(dispatch, firebase, code);
  };

  var updateProfile = function updateProfile(profileUpdate, options) {
    return _actions2.authActions.updateProfile(dispatch, firebase, profileUpdate, options);
  };

  var updateAuth = function updateAuth(authUpdate, updateInProfile) {
    return _actions2.authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile);
  };

  var updateEmail = function updateEmail(newEmail, updateInProfile) {
    return _actions2.authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile);
  };

  var reloadAuth = function reloadAuth() {
    return _actions2.authActions.reloadAuth(dispatch, firebase);
  };

  var linkWithCredential = function linkWithCredential(credential) {
    return _actions2.authActions.linkWithCredential(dispatch, firebase, credential);
  };

  var actionCreators = (0, _actions.mapWithFirebaseAndDispatch)(firebase, dispatch, {
    signInWithPhoneNumber: _actions2.authActions.signInWithPhoneNumber
  });

  var helpers = _extends({
    ref: function ref(path) {
      return firebase.database().ref(path);
    },
    set: set,
    setWithMeta: setWithMeta,
    uniqueSet: uniqueSet,
    push: push,
    pushWithMeta: pushWithMeta,
    remove: remove,
    update: update,
    updateWithMeta: updateWithMeta,
    login: login,
    logout: logout,
    updateAuth: updateAuth,
    updateEmail: updateEmail,
    updateProfile: updateProfile,
    uploadFile: uploadFile,
    uploadFiles: uploadFiles,
    deleteFile: deleteFile,
    createUser: createUser,
    resetPassword: resetPassword,
    confirmPasswordReset: confirmPasswordReset,
    verifyPasswordResetCode: verifyPasswordResetCode,
    watchEvent: watchEvent,
    unWatchEvent: unWatchEvent,
    reloadAuth: reloadAuth,
    linkWithCredential: linkWithCredential,
    promiseEvents: promiseEvents
  }, actionCreators);

  return _extends(firebase, helpers, { helpers: helpers });
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(95);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 54 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),
/* 55 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var baseSet = __webpack_require__(32);

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

module.exports = set;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.populateAndDispatch = exports.orderedFromSnapshot = exports.applyParamsToQuery = exports.unsetWatcher = exports.getWatcherCount = exports.setWatcher = exports.getQueryIdFromPath = exports.getWatchPath = undefined;

var _isString2 = __webpack_require__(5);

var _isString3 = _interopRequireDefault(_isString2);

var _size2 = __webpack_require__(36);

var _size3 = _interopRequireDefault(_size2);

var _forEach2 = __webpack_require__(35);

var _forEach3 = _interopRequireDefault(_forEach2);

var _isNaN2 = __webpack_require__(108);

var _isNaN3 = _interopRequireDefault(_isNaN2);

var _constants = __webpack_require__(1);

var _populate = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tryParseToNumber = function tryParseToNumber(value) {
  var result = Number(value);
  if ((0, _isNaN3.default)(result)) {
    return value;
  }
  return result;
};

var getWatchPath = exports.getWatchPath = function getWatchPath(event, path) {
  if (!event || event === '' || !path) {
    throw new Error('Event and path are required');
  }
  return event + ':' + (path.substring(0, 1) === '/' ? '' : '/') + path;
};

var getQueryIdFromPath = exports.getQueryIdFromPath = function getQueryIdFromPath(path, event) {
  if (!(0, _isString3.default)(path)) {
    throw new Error('Query path must be a string');
  }
  var origPath = path;
  var pathSplitted = path.split('#');
  path = pathSplitted[0];

  var isQuery = pathSplitted.length > 1;
  var queryParams = isQuery ? pathSplitted[1].split('&') : [];
  var queryId = isQuery ? queryParams.map(function (param) {
    var splittedParam = param.split('=');

    if (splittedParam[0] === 'queryId') {
      return splittedParam[1];
    }
  }).filter(function (q) {
    return q;
  }) : undefined;
  return queryId && queryId.length > 0 ? event ? event + ':/' + queryId : queryId[0] : isQuery ? origPath : undefined;
};

var setWatcher = exports.setWatcher = function setWatcher(firebase, dispatch, event, path, queryId) {
  var id = queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path);

  if (firebase._.watchers[id]) {
    firebase._.watchers[id]++;
  } else {
    firebase._.watchers[id] = 1;
  }

  dispatch({ type: _constants.actionTypes.SET_LISTENER, path: path, payload: { id: id } });

  return firebase._.watchers[id];
};

var getWatcherCount = exports.getWatcherCount = function getWatcherCount(firebase, event, path, queryId) {
  var id = queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path);
  return firebase._.watchers[id];
};

var unsetWatcher = exports.unsetWatcher = function unsetWatcher(firebase, dispatch, event, path, queryId) {
  var id = queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path);
  path = path.split('#')[0];
  var watchers = firebase._.watchers;

  if (watchers[id] <= 1) {
    delete watchers[id];
    if (event !== 'first_child' && event !== 'once') {
      firebase.database().ref().child(path).off(event);
    }
  } else if (watchers[id]) {
    watchers[id]--;
  }

  dispatch({ type: _constants.actionTypes.UNSET_LISTENER, path: path, payload: { id: id } });
};

var applyParamsToQuery = exports.applyParamsToQuery = function applyParamsToQuery(queryParams, query) {
  var doNotParse = false;
  if (queryParams) {
    queryParams.forEach(function (param) {
      param = param.split('=');
      switch (param[0]) {
        case 'orderByValue':
          query = query.orderByValue();
          doNotParse = true;
          break;
        case 'orderByPriority':
          query = query.orderByPriority();
          doNotParse = true;
          break;
        case 'orderByKey':
          query = query.orderByKey();
          doNotParse = true;
          break;
        case 'orderByChild':
          query = query.orderByChild(param[1]);
          break;
        case 'limitToFirst':
          query = query.limitToFirst(parseInt(param[1], 10));
          break;
        case 'limitToLast':
          query = query.limitToLast(parseInt(param[1], 10));
          break;
        case 'notParsed':
          doNotParse = true;
          break;
        case 'parsed':
          doNotParse = false;
          break;
        case 'equalTo':
          var equalToParam = !doNotParse ? tryParseToNumber(param[1]) : param[1];
          equalToParam = equalToParam === 'null' ? null : equalToParam;
          equalToParam = equalToParam === 'false' ? false : equalToParam;
          equalToParam = equalToParam === 'true' ? true : equalToParam;
          query = param.length === 3 ? query.equalTo(equalToParam, param[2]) : query.equalTo(equalToParam);
          break;
        case 'startAt':
          var startAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1];
          startAtParam = startAtParam === 'null' ? null : startAtParam;
          query = param.length === 3 ? query.startAt(startAtParam, param[2]) : query.startAt(startAtParam);
          break;
        case 'endAt':
          var endAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1];
          endAtParam = endAtParam === 'null' ? null : endAtParam;
          query = param.length === 3 ? query.endAt(endAtParam, param[2]) : query.endAt(endAtParam);
          break;
      }
    });
  }

  return query;
};

var orderedFromSnapshot = exports.orderedFromSnapshot = function orderedFromSnapshot(snap) {
  if (snap.hasChildren && !snap.hasChildren()) {
    return null;
  }
  var ordered = [];
  if (snap.forEach) {
    snap.forEach(function (child) {
      ordered.push({ key: child.key, value: child.val() });
    });
  }
  return (0, _size3.default)(ordered) ? ordered : null;
};

var populateAndDispatch = exports.populateAndDispatch = function populateAndDispatch(firebase, dispatch, config) {
  var data = config.data,
      populates = config.populates,
      snapshot = config.snapshot,
      path = config.path,
      storeAs = config.storeAs;

  return (0, _populate.promisesForPopulate)(firebase, snapshot.key, data, populates).then(function (results) {
    (0, _forEach3.default)(results, function (result, path) {
      dispatch({
        type: _constants.actionTypes.MERGE,
        path: path,
        data: result
      });
    });
    dispatch({
      type: _constants.actionTypes.SET,
      path: storeAs || path,
      data: data,
      ordered: orderedFromSnapshot(snapshot)
    });
    return results;
  }).catch(function (err) {
    dispatch({
      type: _constants.actionTypes.ERROR,
      payload: err
    });
    return Promise.reject(err);
  });
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(17);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 61 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapWithFirebaseAndDispatch = exports.wrapInDispatch = undefined;

var _mapValues2 = __webpack_require__(63);

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _isObject2 = __webpack_require__(2);

var _isObject3 = _interopRequireDefault(_isObject2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var wrapInDispatch = exports.wrapInDispatch = function wrapInDispatch(dispatch, _ref) {
  var ref = _ref.ref,
      meta = _ref.meta,
      method = _ref.method,
      _ref$args = _ref.args,
      args = _ref$args === undefined ? [] : _ref$args,
      types = _ref.types;

  var _types = _slicedToArray(types, 3),
      requestingType = _types[0],
      successType = _types[1],
      errorType = _types[2];

  dispatch({
    type: (0, _isObject3.default)(requestingType) ? requestingType.type : requestingType,
    meta: meta,
    payload: (0, _isObject3.default)(requestingType) ? requestingType.payload : { args: args }
  });
  return method.apply(undefined, _toConsumableArray(args)).then(function (payload) {
    dispatch({
      type: (0, _isObject3.default)(successType) ? successType.type : successType,
      meta: meta,
      payload: (0, _isObject3.default)(successType) ? successType.payload : payload
    });
    return payload;
  }).catch(function (err) {
    dispatch({
      type: errorType,
      meta: meta,
      payload: err
    });
    return Promise.reject(err);
  });
};

var createWithFirebaseAndDispatch = function createWithFirebaseAndDispatch(firebase, dispatch, dispatchFirst) {
  return function (func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return func.apply(firebase, dispatchFirst ? [dispatch, firebase].concat(args) : [firebase, dispatch].concat(args));
    };
  };
};

var mapWithFirebaseAndDispatch = exports.mapWithFirebaseAndDispatch = function mapWithFirebaseAndDispatch(firebase, dispatch, actions) {
  var aliases = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var withFirebaseAndDispatch = createWithFirebaseAndDispatch(firebase, dispatch);
  return _extends({}, (0, _mapValues3.default)(actions, withFirebaseAndDispatch), aliases.reduce(function (acc, _ref2) {
    var action = _ref2.action,
        name = _ref2.name;
    return _extends({}, acc, _defineProperty({}, name, withFirebaseAndDispatch(action)));
  }, {}));
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(15),
    baseForOwn = __webpack_require__(110),
    baseIteratee = __webpack_require__(9);

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(111);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storageActions = exports.queryActions = exports.authActions = undefined;

var _auth = __webpack_require__(112);

var authActions = _interopRequireWildcard(_auth);

var _query = __webpack_require__(85);

var queryActions = _interopRequireWildcard(_query);

var _storage = __webpack_require__(166);

var storageActions = _interopRequireWildcard(_storage);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.authActions = authActions;
exports.queryActions = queryActions;
exports.storageActions = storageActions;
exports.default = { authActions: authActions, queryActions: queryActions, storageActions: storageActions };

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(27),
    baseSet = __webpack_require__(32),
    castPath = __webpack_require__(7);

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(43);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),
/* 68 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(18),
    baseClone = __webpack_require__(44),
    baseUnset = __webpack_require__(25),
    castPath = __webpack_require__(7),
    copyObject = __webpack_require__(19),
    customOmitClone = __webpack_require__(118),
    flatRest = __webpack_require__(42),
    getAllKeysIn = __webpack_require__(71);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

module.exports = omit;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(17);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),
/* 71 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.populate = exports.fixPath = exports.isEmpty = exports.isLoaded = exports.getVal = undefined;

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _some2 = __webpack_require__(31);

var _some3 = _interopRequireDefault(_some2);

var _compact2 = __webpack_require__(119);

var _compact3 = _interopRequireDefault(_compact2);

var _isString2 = __webpack_require__(5);

var _isString3 = _interopRequireDefault(_isString2);

var _defaultsDeep2 = __webpack_require__(120);

var _defaultsDeep3 = _interopRequireDefault(_defaultsDeep2);

var _reduce2 = __webpack_require__(138);

var _reduce3 = _interopRequireDefault(_reduce2);

var _every2 = __webpack_require__(139);

var _every3 = _interopRequireDefault(_every2);

var _mapValues2 = __webpack_require__(63);

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _map2 = __webpack_require__(13);

var _map3 = _interopRequireDefault(_map2);

var _last2 = __webpack_require__(26);

var _last3 = _interopRequireDefault(_last2);

var _has2 = __webpack_require__(55);

var _has3 = _interopRequireDefault(_has2);

var _get2 = __webpack_require__(16);

var _get3 = _interopRequireDefault(_get2);

var _set2 = __webpack_require__(56);

var _set3 = _interopRequireDefault(_set2);

var _size2 = __webpack_require__(36);

var _size3 = _interopRequireDefault(_size2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constants = __webpack_require__(1);

var _populate = __webpack_require__(14);

var _reducers = __webpack_require__(47);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getVal = exports.getVal = function getVal(firebase, path, notSetValue) {
  if (!firebase) {
    return notSetValue;
  }

  var dotPath = (0, _reducers.getDotStrPath)(path);
  var valueAtPath = (0, _get3.default)(firebase, dotPath, notSetValue);

  return valueAtPath;
};

var isLoaded = exports.isLoaded = function isLoaded() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args || !args.length ? true : (0, _every3.default)(args, function (arg) {
    return arg !== undefined && (0, _get3.default)(arg, 'isLoaded') !== false;
  });
};

var isEmpty = exports.isEmpty = function isEmpty() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return (0, _some3.default)(args, function (arg) {
    return !(arg && (0, _size3.default)(arg)) || arg.isEmpty === true;
  });
};

var fixPath = exports.fixPath = function fixPath(path) {
  return (path.substring(0, 1) === '/' ? '' : '/') + path;
};

var buildChildList = function buildChildList(state, list, p) {
  return (0, _mapValues3.default)(list, function (val, key) {
    var getKey = val;

    if (val === true || p.populateByKey) {
      getKey = key;
    }

    var dotRoot = (0, _compact3.default)(p.root.split('/')).join('.');
    var pathArr = [dotRoot, getKey];

    if (p.childParam) {
      pathArr.push(p.childParam);
    }

    var pathString = pathArr.join('.');

    if ((0, _get3.default)(state.data, pathString)) {
      return p.keyProp ? _extends(_defineProperty({}, p.keyProp, getKey), (0, _get3.default)(state.data, pathString)) : (0, _get3.default)(state.data, pathString);
    }

    return val === true || p.populateByKey ? val : getKey;
  });
};

var populateChild = function populateChild(state, child, p) {
  var childVal = (0, _get3.default)(child, p.child);
  if (!child || !childVal) {
    return null;
  }

  if ((0, _isString3.default)(childVal)) {
    var dotRoot = (0, _compact3.default)(p.root.split('/')).join('.');
    var pathArr = [dotRoot, childVal];

    if (p.childParam) {
      pathArr.push(p.childParam);
    }

    var pathString = pathArr.join('.');

    var populateVal = (0, _get3.default)(state.data, pathString);
    if (populateVal) {
      return (0, _set3.default)({}, p.childAlias || p.child, p.keyProp ? _extends(_defineProperty({}, p.keyProp, childVal), populateVal) : populateVal);
    }

    return child;
  }

  return (0, _set3.default)({}, p.childAlias || p.child, buildChildList(state, childVal, p));
};

var populate = exports.populate = function populate(state, path, populates, notSetValue) {
  var splitPath = (0, _compact3.default)(path.split('/'));

  var pathArr = _constants.topLevelPaths.indexOf(splitPath[0]) === -1 ? ['data'].concat(_toConsumableArray(splitPath)) : splitPath;
  var dotPath = pathArr.join('.');

  var data = (0, _get3.default)(state, dotPath, notSetValue);

  if (!state || data === notSetValue) {
    return notSetValue;
  }

  if (data === null) {
    return null;
  }

  var populatesForData = (0, _populate.getPopulateObjs)((0, _isFunction3.default)(populates) ? populates((0, _last3.default)(pathArr), data) : populates);

  if ((0, _isArray3.default)(data)) {
    var someArrayItemHasKey = function someArrayItemHasKey(array) {
      return function (key) {
        return (0, _some3.default)(array, function (item) {
          return (0, _has3.default)(item, key);
        });
      };
    };

    var _dataHasPopulateChilds = (0, _some3.default)(populatesForData, function (populate) {
      return someArrayItemHasKey(data)(['value', populate.child]);
    });

    if (_dataHasPopulateChilds) {
      return data.map(function (_ref) {
        var key = _ref.key,
            dataValue = _ref.value;

        var populatedValue = populatesForData.map(function (p) {
          return populateChild(state, dataValue, p);
        }).reduce(function (acc, v) {
          return (0, _defaultsDeep3.default)(v, acc);
        }, dataValue);

        return {
          key: key,
          value: populatedValue
        };
      });
    }

    return data;
  }

  var dataHasPopulateChilds = (0, _some3.default)(populatesForData, function (p) {
    return (0, _has3.default)(data, p.child);
  });

  if (dataHasPopulateChilds) {
    return populatesForData.map(function (p) {
      return populateChild(state, data, p);
    }).reduce(function (acc, v) {
      return (0, _defaultsDeep3.default)(v, acc);
    }, data);
  }

  if (pathArr.indexOf('profile') !== -1) {
    return data;
  }

  return (0, _mapValues3.default)(data, function (child, childKey) {
    var key = pathArr[0] === 'ordered' ? child.key : childKey;

    var populatesForDataItem = (0, _populate.getPopulateObjs)((0, _isFunction3.default)(populates) ? populates(key, child) : populates);

    var dataHasPopulateChilds = (0, _some3.default)(populatesForDataItem, function (p) {
      return (0, _has3.default)(child, p.child);
    });

    if (!dataHasPopulateChilds) {
      return child;
    }

    return (0, _reduce3.default)((0, _map3.default)(populatesForDataItem, function (p) {
      return populateChild(state, child, p);
    }), function (obj, v) {
      return (0, _defaultsDeep3.default)(v, obj);
    }, child);
  });
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(74),
    assignMergeValue = __webpack_require__(75),
    baseFor = __webpack_require__(64),
    baseMergeDeep = __webpack_require__(128),
    isObject = __webpack_require__(2),
    keysIn = __webpack_require__(83),
    safeGet = __webpack_require__(82);

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(123),
    listCacheDelete = __webpack_require__(124),
    listCacheGet = __webpack_require__(125),
    listCacheHas = __webpack_require__(126),
    listCacheSet = __webpack_require__(127);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(15),
    eq = __webpack_require__(34);

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;


/***/ }),
/* 76 */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(2);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),
/* 78 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(38),
    isObjectLike = __webpack_require__(4);

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;


/***/ }),
/* 80 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 81 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 82 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;


/***/ }),
/* 83 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(46),
    isIterateeCall = __webpack_require__(137);

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remove = exports.unWatchEvents = exports.watchEvents = exports.unWatchEvent = exports.watchEvent = undefined;

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _constants = __webpack_require__(1);

var _query = __webpack_require__(58);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var watchEvent = exports.watchEvent = function watchEvent(firebase, dispatch, options) {
  if (!firebase.database || typeof firebase.database !== 'function') {
    throw new Error('Firebase database is required to create watchers');
  }
  var type = options.type,
      path = options.path,
      populates = options.populates,
      queryParams = options.queryParams,
      queryId = options.queryId,
      isQuery = options.isQuery,
      storeAs = options.storeAs;
  var logErrors = firebase._.config.logErrors;


  var watchPath = !storeAs ? path : path + '@' + storeAs;
  var id = queryId || (0, _query.getQueryIdFromPath)(path);
  var counter = (0, _query.getWatcherCount)(firebase, type, watchPath, id);

  if (counter > 0) {
    if (id) {
      (0, _query.unsetWatcher)(firebase, dispatch, type, path, id);
    }
  }

  (0, _query.setWatcher)(firebase, dispatch, type, watchPath, id);

  if (type === 'first_child') {
    return firebase.database().ref().child(path).orderByKey().limitToFirst(1).once('value').then(function (snapshot) {
      if (snapshot.val() === null) {
        dispatch({
          type: _constants.actionTypes.NO_VALUE,
          path: storeAs || path
        });
      }
      return snapshot;
    }).catch(function (err) {
      dispatch({
        type: _constants.actionTypes.ERROR,
        path: storeAs || path,
        payload: err
      });
      return Promise.reject(err);
    });
  }

  var query = firebase.database().ref().child(path);

  if (isQuery) {
    query = (0, _query.applyParamsToQuery)(queryParams, query);
  }

  dispatch({ type: _constants.actionTypes.START, path: storeAs || path });

  if (type === 'once') {
    return query.once('value').then(function (snapshot) {
      if (snapshot.val() === null) {
        return dispatch({
          type: _constants.actionTypes.NO_VALUE,
          path: storeAs || path
        });
      }

      if (!populates) {
        return dispatch({
          type: _constants.actionTypes.SET,
          path: storeAs || path,
          data: snapshot.val(),
          ordered: (0, _query.orderedFromSnapshot)(snapshot)
        });
      }

      return (0, _query.populateAndDispatch)(firebase, dispatch, {
        path: path,
        storeAs: storeAs,
        snapshot: snapshot,
        data: snapshot.val(),
        populates: populates
      });
    }).catch(function (err) {
      dispatch({
        type: _constants.actionTypes.UNAUTHORIZED_ERROR,
        payload: err
      });
      return Promise.reject(err);
    });
  }

  query.on(type, function (snapshot) {
    var data = type === 'child_removed' ? undefined : snapshot.val();
    var resultPath = storeAs || type === 'value' ? path : path + '/' + snapshot.key;

    if (!populates) {
      var ordered = type === 'child_added' ? [{ key: snapshot.key, value: snapshot.val() }] : (0, _query.orderedFromSnapshot)(snapshot);
      return dispatch({
        type: _constants.actionTypes.SET,
        path: storeAs || resultPath,
        data: data,
        ordered: ordered
      });
    }

    return (0, _query.populateAndDispatch)(firebase, dispatch, {
      path: path,
      storeAs: storeAs,
      snapshot: snapshot,
      data: snapshot.val(),
      populates: populates
    });
  }, function (err) {
    if (logErrors) {
      console.log('RRF: Error retrieving data for path: ' + path + ', storeAs: ' + storeAs + '. Firebase:', err);
    }
    dispatch({
      type: _constants.actionTypes.ERROR,
      storeAs: storeAs,
      path: path,
      payload: err
    });
  });
};

var unWatchEvent = exports.unWatchEvent = function unWatchEvent(firebase, dispatch, _ref) {
  var type = _ref.type,
      path = _ref.path,
      storeAs = _ref.storeAs,
      queryId = _ref.queryId;

  var watchPath = !storeAs ? path : path + '@' + storeAs;
  (0, _query.unsetWatcher)(firebase, dispatch, type, watchPath, queryId);
};

var watchEvents = exports.watchEvents = function watchEvents(firebase, dispatch, events) {
  if (!(0, _isArray3.default)(events)) {
    throw new Error('Events config must be an Array');
  }
  return events.map(function (event) {
    return watchEvent(firebase, dispatch, event);
  });
};

var unWatchEvents = exports.unWatchEvents = function unWatchEvents(firebase, dispatch, events) {
  return events.forEach(function (event) {
    return unWatchEvent(firebase, dispatch, event);
  });
};

var remove = exports.remove = function remove(firebase, dispatch, path) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var _options$dispatchActi = options.dispatchAction,
      dispatchAction = _options$dispatchActi === undefined ? true : _options$dispatchActi;
  var dispatchRemoveAction = firebase._.config.dispatchRemoveAction;

  return firebase.database().ref(path).remove().then(function () {
    if (dispatchRemoveAction && dispatchAction) {
      dispatch({ type: _constants.actionTypes.REMOVE, path: path });
    }
    return path;
  }).catch(function (err) {
    dispatch({ type: _constants.actionTypes.ERROR, payload: err });
    return Promise.reject(err);
  });
};

exports.default = { watchEvents: watchEvents, unWatchEvents: unWatchEvents, remove: remove };

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(0);

/**
 * Casts `value` as an array if it's not one.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Lang
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast array.
 * @example
 *
 * _.castArray(1);
 * // => [1]
 *
 * _.castArray({ 'a': 1 });
 * // => [{ 'a': 1 }]
 *
 * _.castArray('abc');
 * // => ['abc']
 *
 * _.castArray(null);
 * // => [null]
 *
 * _.castArray(undefined);
 * // => [undefined]
 *
 * _.castArray();
 * // => []
 *
 * var array = [1, 2, 3];
 * console.log(_.castArray(array) === array);
 * // => true
 */
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray(value) ? value : [value];
}

module.exports = castArray;


/***/ }),
/* 87 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(87);

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(178);

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createFirebaseInstance = __webpack_require__(51);

var _firebaseConnect = __webpack_require__(172);

var _firebaseConnect2 = _interopRequireDefault(_firebaseConnect);

var _firestoreConnect = __webpack_require__(187);

var _firestoreConnect2 = _interopRequireDefault(_firestoreConnect);

var _withFirebase = __webpack_require__(188);

var _withFirebase2 = _interopRequireDefault(_withFirebase);

var _withFirestore = __webpack_require__(189);

var _withFirestore2 = _interopRequireDefault(_withFirestore);

var _enhancer = __webpack_require__(190);

var _enhancer2 = _interopRequireDefault(_enhancer);

var _reducer = __webpack_require__(191);

var _reducer2 = _interopRequireDefault(_reducer);

var _constants = __webpack_require__(1);

var _constants2 = _interopRequireDefault(_constants);

var _auth = __webpack_require__(50);

var _helpers = __webpack_require__(72);

var helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _extends({
  firebase: _firebaseConnect2.default,
  createFirebaseInstance: _createFirebaseInstance.createFirebaseInstance,
  firebaseConnect: _firebaseConnect2.default,
  createFirebaseConnect: _firebaseConnect.createFirebaseConnect,
  firestoreConnect: _firestoreConnect2.default,
  createFirestoreConnect: _firestoreConnect.createFirestoreConnect,
  withFirebase: _withFirebase2.default,
  createWithFirebase: _withFirebase.createWithFirebase,
  withFirestore: _withFirestore2.default,
  createWithFirestore: _withFirestore.createWithFirestore,
  reducer: _reducer2.default,
  firebaseReducer: _reducer2.default,
  firebaseStateReducer: _reducer2.default,
  reduxReactFirebase: _enhancer2.default,
  reactReduxFirebase: _enhancer2.default,
  reduxFirebase: _enhancer2.default,
  constants: _constants2.default,
  actionTypes: _constants.actionTypes,
  getFirebase: _enhancer.getFirebase,
  authIsReady: _auth.authIsReady,
  helpers: helpers
}, helpers);
module.exports = exports.default;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEventsFromInput = exports.pathStrToObj = undefined;

var _remove2 = __webpack_require__(92);

var _remove3 = _interopRequireDefault(_remove2);

var _isString2 = __webpack_require__(5);

var _isString3 = _interopRequireDefault(_isString2);

var _isObject2 = __webpack_require__(2);

var _isObject3 = _interopRequireDefault(_isObject2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _flatMap2 = __webpack_require__(97);

var _flatMap3 = _interopRequireDefault(_flatMap2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _populate = __webpack_require__(14);

var _query = __webpack_require__(58);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pathStrToObj = exports.pathStrToObj = function pathStrToObj(path) {
  var pathObj = { path: path, type: 'value', isQuery: false };
  var queryId = (0, _query.getQueryIdFromPath)(path);

  if (queryId) {
    var pathArray = path.split('#');
    pathObj = _extends({}, pathObj, {
      queryId: queryId,
      isQuery: true,
      path: pathArray[0],
      queryParams: pathArray[1].split('&')
    });
    if ((0, _populate.getPopulates)(pathArray[1].split('&'))) {
      pathObj.populates = (0, _populate.getPopulates)(pathArray[1].split('&'));
      pathObj.queryParams = (0, _remove3.default)(pathArray[1].split('&'), function (p) {
        return p.indexOf('populate') === -1;
      });
    }
  }

  return pathObj;
};

var getEventsFromInput = exports.getEventsFromInput = function getEventsFromInput(paths) {
  return (0, _flatMap3.default)(paths, function (path) {
    if ((0, _isString3.default)(path)) {
      return [pathStrToObj(path)];
    }

    if ((0, _isArray3.default)(path)) {
      return [{ type: 'first_child', path: path[0] }, { type: 'child_added', path: path[0] }, { type: 'child_removed', path: path[0] }, { type: 'child_moved', path: path[0] }, { type: 'child_changed', path: path[0] }];
    }

    if ((0, _isObject3.default)(path)) {
      if (!path.path) {
        throw new Error('Path is a required parameter within definition object');
      }
      var strPath = path.path;

      if (path.storeAs) {
        strPath += '@' + path.storeAs;
      }

      if (path.queryParams) {
        strPath += '#' + path.queryParams.join('&');
      }

      path = _extends({}, pathStrToObj(strPath), path);
      return [path];
    }

    throw new Error('Invalid Path Definition: ' + path + '. Only strings, objects, and arrays accepted.');
  });
};

exports.default = { getEventsFromInput: getEventsFromInput };

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var baseIteratee = __webpack_require__(9),
    basePullAt = __webpack_require__(93);

/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = baseIteratee(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  basePullAt(array, indexes);
  return result;
}

module.exports = remove;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var baseUnset = __webpack_require__(25),
    isIndex = __webpack_require__(28);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (isIndex(index)) {
        splice.call(array, index, 1);
      } else {
        baseUnset(array, index);
      }
    }
  }
  return array;
}

module.exports = basePullAt;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(0),
    isSymbol = __webpack_require__(52);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 95 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(27),
    baseSlice = __webpack_require__(54);

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(29),
    map = __webpack_require__(13);

/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

module.exports = flatMap;


/***/ }),
/* 98 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(100),
    isArguments = __webpack_require__(30),
    isArray = __webpack_require__(0);

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(12);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(102)))

/***/ }),
/* 102 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(104);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 104 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var asciiSize = __webpack_require__(106),
    hasUnicode = __webpack_require__(39),
    unicodeSize = __webpack_require__(107);

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

module.exports = stringSize;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(61);

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

module.exports = asciiSize;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(61);

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

module.exports = asciiSize;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var isNumber = __webpack_require__(109);

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(4);

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(64),
    keys = __webpack_require__(40);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),
/* 111 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signInWithPhoneNumber = exports.linkWithCredential = exports.reloadAuth = exports.updateEmail = exports.updateAuth = exports.updateProfile = exports.verifyPasswordResetCode = exports.confirmPasswordReset = exports.resetPassword = exports.createUser = exports.logout = exports.login = exports.init = exports.handleRedirectResult = exports.createUserProfile = exports.watchUserProfile = exports.handleProfileWatchResponse = exports.unWatchUserProfile = undefined;

var _pick2 = __webpack_require__(41);

var _pick3 = _interopRequireDefault(_pick2);

var _omit2 = __webpack_require__(69);

var _omit3 = _interopRequireDefault(_omit2);

var _forEach2 = __webpack_require__(35);

var _forEach3 = _interopRequireDefault(_forEach2);

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = __webpack_require__(5);

var _isString3 = _interopRequireDefault(_isString2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.linkAndRetrieveDataWithCredential = linkAndRetrieveDataWithCredential;
exports.linkWithPopup = linkWithPopup;
exports.linkWithRedirect = linkWithRedirect;

var _constants = __webpack_require__(1);

var _helpers = __webpack_require__(72);

var _auth = __webpack_require__(50);

var _populate = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var dispatchLoginError = function dispatchLoginError(dispatch, authError) {
  return dispatch({
    type: _constants.actionTypes.LOGIN_ERROR,
    authError: authError
  });
};

var unWatchUserProfile = exports.unWatchUserProfile = function unWatchUserProfile(firebase) {
  var _firebase$_ = firebase._,
      authUid = _firebase$_.authUid,
      _firebase$_$config = _firebase$_.config,
      userProfile = _firebase$_$config.userProfile,
      useFirestoreForProfile = _firebase$_$config.useFirestoreForProfile;

  if (firebase._.profileWatch) {
    if (useFirestoreForProfile && firebase.firestore) {
      firebase._.profileWatch();
    } else {
      firebase.database().ref().child(userProfile + '/' + authUid).off('value', firebase._.profileWatch);
    }
    firebase._.profileWatch = null;
  }
};

var getProfileFromSnap = function getProfileFromSnap(snap) {
  if (snap && snap.val) {
    return snap.val();
  }

  if (snap && snap.data && snap.exists) {
    return snap.data();
  }
  return null;
};

var handleProfileWatchResponse = exports.handleProfileWatchResponse = function handleProfileWatchResponse(dispatch, firebase, userProfileSnap, token) {
  var _firebase$_$config2 = firebase._.config,
      profileParamsToPopulate = _firebase$_$config2.profileParamsToPopulate,
      autoPopulateProfile = _firebase$_$config2.autoPopulateProfile,
      useFirestoreForProfile = _firebase$_$config2.useFirestoreForProfile,
      logErrors = _firebase$_$config2.logErrors;

  var profile = getProfileFromSnap(userProfileSnap);
  if (!profileParamsToPopulate || useFirestoreForProfile || !(0, _isArray3.default)(profileParamsToPopulate) && !(0, _isString3.default)(profileParamsToPopulate)) {
    if (useFirestoreForProfile && profileParamsToPopulate) {
      console.warn('Profile population is not yet supported for Firestore');
    }
    dispatch({
      type: _constants.actionTypes.SET_PROFILE,
      profile: token ? _extends({}, profile, { token: token }) : profile
    });
  } else {
    (0, _populate.promisesForPopulate)(firebase, userProfileSnap.key, profile, profileParamsToPopulate).then(function (data) {
      (0, _forEach3.default)(data, function (result, path) {
        dispatch({
          type: _constants.actionTypes.SET,
          path: path,
          data: result,
          timestamp: Date.now(),
          requesting: false,
          requested: true
        });
      });
      if (!autoPopulateProfile) {
        dispatch({ type: _constants.actionTypes.SET_PROFILE, profile: profile });
      } else {
        var populates = (0, _populate.getPopulateObjs)(profileParamsToPopulate);
        var _profile = userProfileSnap.val();
        dispatch({
          type: _constants.actionTypes.SET_PROFILE,
          profile: (0, _helpers.populate)({ profile: token ? _extends({}, _profile, { token: token }) : _profile, data: data }, 'profile', populates)
        });
      }
    }).catch(function (err) {
      if (logErrors) {
        console.error('RRF: Error retrieving data for profile population. Firebase:', err);
      }

      dispatch({
        type: _constants.actionTypes.UNAUTHORIZED_ERROR,
        authError: 'Error during profile population: ' + err.message
      });

      dispatch({ type: _constants.actionTypes.SET_PROFILE, profile: profile });
    });
  }
};

function createProfileWatchErrorHandler(dispatch, firebase) {
  var _firebase$_$config3 = firebase._.config,
      onProfileListenerError = _firebase$_$config3.onProfileListenerError,
      logErrors = _firebase$_$config3.logErrors;

  return function handleProfileError(err) {
    if (logErrors) {
      console.error('Error with profile listener: ' + (err.message || ''), err);
    }
    if ((0, _isFunction3.default)(onProfileListenerError)) {
      var factoryResult = onProfileListenerError(err, firebase);

      if ((0, _isFunction3.default)(factoryResult.then)) {
        return factoryResult;
      }
    }
    return Promise.reject(err);
  };
}

var watchUserProfile = exports.watchUserProfile = function watchUserProfile(dispatch, firebase) {
  var _firebase$_2 = firebase._,
      authUid = _firebase$_2.authUid,
      _firebase$_2$config = _firebase$_2.config,
      userProfile = _firebase$_2$config.userProfile,
      useFirestoreForProfile = _firebase$_2$config.useFirestoreForProfile,
      enableClaims = _firebase$_2$config.enableClaims;

  unWatchUserProfile(firebase);

  if (userProfile) {
    if (useFirestoreForProfile && firebase.firestore) {
      firebase._.profileWatch = firebase.firestore().collection(userProfile).doc(authUid).onSnapshot(function (userProfileSnap) {
        return enableClaims ? firebase.auth().currentUser.getIdTokenResult(true).then(function (token) {
          return handleProfileWatchResponse(dispatch, firebase, userProfileSnap, token);
        }) : handleProfileWatchResponse(dispatch, firebase, userProfileSnap);
      }, createProfileWatchErrorHandler(dispatch, firebase));
    } else if (firebase.database) {
      firebase._.profileWatch = firebase.database().ref().child(userProfile + '/' + authUid).on('value', function (userProfileSnap) {
        return enableClaims ? firebase.auth().currentUser.getIdTokenResult(true).then(function (token) {
          return handleProfileWatchResponse(dispatch, firebase, userProfileSnap, token);
        }) : handleProfileWatchResponse(dispatch, firebase, userProfileSnap);
      }, createProfileWatchErrorHandler(dispatch, firebase));
    } else {
      throw new Error('Real Time Database or Firestore must be included to enable user profile');
    }
  }
};

var createUserProfile = exports.createUserProfile = function createUserProfile(dispatch, firebase, userData, profile) {
  var config = firebase._.config;

  if (!config.userProfile || !firebase.database && !firebase.firestore) {
    return Promise.resolve(userData);
  }

  if ((0, _isFunction3.default)(config.profileFactory)) {
    try {
      profile = config.profileFactory(userData, profile);
    } catch (err) {
      console.error('Error occured within profileFactory function:', err.message || err);

      return Promise.reject(err);
    }
  }

  if (config.useFirestoreForProfile) {
    return firebase.firestore().collection(config.userProfile).doc(userData.uid || userData.user.uid).get().then(function (profileSnap) {
      if (!config.updateProfileOnLogin && profileSnap.exists) {
        return profileSnap.data();
      }
      var newProfile = profile;

      if (!newProfile) {
        var userDataObject = userData.uid ? userData.toJSON ? userData.toJSON() : userData : userData.user.toJSON ? userData.user.toJSON() : userData.user;

        newProfile = _extends({}, (0, _omit3.default)(userDataObject, config.keysToRemoveFromAuth), {
          avatarUrl: userDataObject.photoURL });
      }

      if ((0, _isArray3.default)(newProfile.providerData) && newProfile.providerData.length) {
        newProfile.providerData = newProfile.providerData.map(function (providerDataItem) {
          return (0, _pick3.default)(providerDataItem, config.keysToPreserveFromProviderData);
        });
      }

      return profileSnap.ref.set(newProfile, { merge: true }).then(function () {
        return newProfile;
      });
    }).catch(function (err) {
      dispatch({ type: _constants.actionTypes.UNAUTHORIZED_ERROR, authError: err });
      return Promise.reject(err);
    });
  }

  return firebase.database().ref().child(config.userProfile + '/' + (userData.user ? userData.user.uid : userData.uid)).once('value').then(function (profileSnap) {
    return !config.updateProfileOnLogin && profileSnap.val() !== null ? profileSnap.val() : profileSnap.ref.update(profile).then(function () {
      return profile;
    });
  }).catch(function (err) {
    dispatch({ type: _constants.actionTypes.UNAUTHORIZED_ERROR, authError: err });
    if ((0, _isFunction3.default)(config.onProfileWriteError)) {
      config.onProfileWriteError(err, firebase);
    }
    return Promise.reject(err);
  });
};

var handleAuthStateChange = function handleAuthStateChange(dispatch, firebase, authData) {
  var config = firebase._.config;

  if (!authData) {
    if ((0, _isFunction3.default)(config.onAuthStateChanged)) {
      firebase._.config.onAuthStateChanged(authData, firebase, dispatch);
    }
    dispatch({
      type: _constants.actionTypes.AUTH_EMPTY_CHANGE,
      preserve: config.preserveOnEmptyAuthChange
    });
  } else {
    firebase._.authUid = authData.uid;
    if (config.presence) {
      (0, _auth.setupPresence)(dispatch, firebase);
    }

    dispatch({
      type: _constants.actionTypes.LOGIN,
      auth: authData,
      preserve: config.preserveOnLogin
    });

    watchUserProfile(dispatch, firebase);

    if ((0, _isFunction3.default)(config.onAuthStateChanged)) {
      config.onAuthStateChanged(authData, firebase, dispatch);
    }
  }
};

var handleRedirectResult = exports.handleRedirectResult = function handleRedirectResult(dispatch, firebase, authData) {
  if (typeof firebase._.config.onRedirectResult === 'function') {
    firebase._.config.onRedirectResult(authData, firebase, dispatch);
  }
  if (authData && authData.user) {
    var user = authData.user;


    firebase._.authUid = user.uid;
    watchUserProfile(dispatch, firebase);

    dispatch({
      type: _constants.actionTypes.LOGIN,
      auth: user,
      preserve: firebase._.config.preserveOnLogin
    });

    return createUserProfile(dispatch, firebase, user, {
      email: user.email,
      displayName: user.providerData[0].displayName || user.email,
      avatarUrl: user.providerData[0].photoURL,
      providerData: user.providerData
    });
  }
};

var init = exports.init = function init(dispatch, firebase) {
  if (!firebase.auth) {
    return;
  }
  dispatch({ type: _constants.actionTypes.AUTHENTICATION_INIT_STARTED });

  firebase.auth().onAuthStateChanged(function (authData) {
    return handleAuthStateChange(dispatch, firebase, authData);
  });

  if (firebase._.config.enableRedirectHandling && (0, _isFunction3.default)(firebase.auth().getRedirectResult) && typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('http') !== -1) {
    firebase.auth().getRedirectResult().then(function (authData) {
      return handleRedirectResult(dispatch, firebase, authData);
    }).catch(function (error) {
      dispatchLoginError(dispatch, error);
      return Promise.reject(error);
    });
  }

  firebase.auth().currentUser;

  dispatch({ type: _constants.actionTypes.AUTHENTICATION_INIT_FINISHED });
};

var login = exports.login = function login(dispatch, firebase, credentials) {
  var _firebase$auth;

  if (firebase._.config.resetBeforeLogin) {
    dispatchLoginError(dispatch, null);
  }

  var _getLoginMethodAndPar = (0, _auth.getLoginMethodAndParams)(firebase, credentials),
      method = _getLoginMethodAndPar.method,
      params = _getLoginMethodAndPar.params;

  return (_firebase$auth = firebase.auth())[method].apply(_firebase$auth, _toConsumableArray(params)).then(function (userData) {
    if (!userData) return Promise.resolve(null);

    if (['signInWithEmailAndPassword', 'signInAndRetrieveDataWithEmailAndPassword'].includes(method)) {
      return { user: userData };
    }

    if (['signInWithCustomToken', 'signInAndRetrieveDataWithCustomToken'].includes(method)) {
      if (!firebase._.config.updateProfileOnLogin) {
        return { user: userData };
      }
      return createUserProfile(dispatch, firebase, userData, credentials.profile);
    }

    if (method === 'signInWithPhoneNumber') {
      return _extends({}, userData, {
        confirm: function confirm(code) {
          return userData.confirm(code).then(function (_ref) {
            var user = _ref.user,
                additionalUserInfo = _ref.additionalUserInfo;
            return createUserProfile(dispatch, firebase, user, {
              phoneNumber: user.providerData[0].phoneNumber,
              providerData: user.providerData
            }).then(function (profile) {
              return { profile: profile, user: user, additionalUserInfo: additionalUserInfo };
            });
          });
        }
      });
    }

    var user = userData.user || userData;

    return createUserProfile(dispatch, firebase, user, credentials.profile || {
      email: user.email,
      displayName: user.providerData[0].displayName || user.email,
      avatarUrl: user.providerData[0].photoURL,
      providerData: user.providerData
    }).then(function (profile) {
      return _extends({ profile: profile }, userData);
    });
  }).catch(function (err) {
    dispatchLoginError(dispatch, err);
    return Promise.reject(err);
  });
};

var logout = exports.logout = function logout(dispatch, firebase) {
  unWatchUserProfile(firebase);
  return firebase.auth().signOut().then(function () {
    var action = {
      type: _constants.actionTypes.LOGOUT
    };
    if (firebase._.config.preserveOnLogout) {
      action.preserve = firebase._.config.preserveOnLogout;
    }
    dispatch(action);
    firebase._.authUid = null;
    return firebase;
  });
};

var createUser = exports.createUser = function createUser(dispatch, firebase, _ref2, profile) {
  var email = _ref2.email,
      password = _ref2.password,
      signIn = _ref2.signIn;

  dispatchLoginError(dispatch, null);

  if (!email || !password) {
    var error = new Error('Email and Password are required to create user');
    dispatchLoginError(dispatch, error);
    return Promise.reject(error);
  }

  return firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userData) {
    return firebase.auth().currentUser || !!signIn && signIn === false ? createUserProfile(dispatch, firebase, userData, profile || { email: email }) : login(dispatch, firebase, { email: email, password: password }).then(function () {
      return createUserProfile(dispatch, firebase, userData, profile || { email: email });
    }).catch(function (err) {
      if (err) {
        switch (err.code) {
          case 'auth/user-not-found':
            dispatchLoginError(dispatch, new Error('The specified user account does not exist.'));
            break;
          default:
            dispatchLoginError(dispatch, err);
        }
      }
      return Promise.reject(err);
    });
  }).catch(function (err) {
    dispatchLoginError(dispatch, err);
    return Promise.reject(err);
  });
};

var resetPassword = exports.resetPassword = function resetPassword(dispatch, firebase, email) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().sendPasswordResetEmail(email).catch(function (err) {
    if (err) {
      switch (err.code) {
        case 'auth/user-not-found':
          dispatchLoginError(dispatch, new Error('The specified user account does not exist.'));
          break;
        default:
          dispatchLoginError(dispatch, err);
      }
      return Promise.reject(err);
    }
  });
};

var confirmPasswordReset = exports.confirmPasswordReset = function confirmPasswordReset(dispatch, firebase, code, password) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().confirmPasswordReset(code, password).catch(function (err) {
    if (err) {
      switch (err.code) {
        case 'auth/expired-action-code':
          dispatchLoginError(dispatch, new Error('The action code has expired.'));
          break;
        case 'auth/invalid-action-code':
          dispatchLoginError(dispatch, new Error('The action code is invalid.'));
          break;
        case 'auth/user-disabled':
          dispatchLoginError(dispatch, new Error('The user is disabled.'));
          break;
        case 'auth/user-not-found':
          dispatchLoginError(dispatch, new Error('The user is not found.'));
          break;
        case 'auth/weak-password':
          dispatchLoginError(dispatch, new Error('The password is not strong enough.'));
          break;
        default:
          dispatchLoginError(dispatch, err);
      }
      return Promise.reject(err);
    }
  });
};

var verifyPasswordResetCode = exports.verifyPasswordResetCode = function verifyPasswordResetCode(dispatch, firebase, code) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().verifyPasswordResetCode(code).catch(function (err) {
    if (err) {
      dispatchLoginError(dispatch, err);
    }
    return Promise.reject(err);
  });
};

var updateProfile = exports.updateProfile = function updateProfile(dispatch, firebase, profileUpdate, options) {
  var config = firebase._.config;

  dispatch({
    type: _constants.actionTypes.PROFILE_UPDATE_START,
    payload: profileUpdate
  });

  var updatePromise = config.useFirestoreForProfile ? _auth.updateProfileOnFirestore : _auth.updateProfileOnRTDB;
  return updatePromise(firebase, profileUpdate, options).then(function (snap) {
    dispatch({
      type: _constants.actionTypes.PROFILE_UPDATE_SUCCESS,
      payload: config.useFirestoreForProfile ? snap.data() : snap.val()
    });
    return snap;
  }).catch(function (error) {
    dispatch({ type: _constants.actionTypes.PROFILE_UPDATE_ERROR, error: error });
    return Promise.reject(error);
  });
};

var updateAuth = exports.updateAuth = function updateAuth(dispatch, firebase, authUpdate, updateInProfile) {
  dispatch({ type: _constants.actionTypes.AUTH_UPDATE_START, payload: authUpdate });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to update auth.');
    dispatch({ type: _constants.actionTypes.AUTH_UPDATE_ERROR, payload: error });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.updateProfile(authUpdate).then(function (payload) {
    dispatch({
      type: _constants.actionTypes.AUTH_UPDATE_SUCCESS,
      auth: firebase.auth().currentUser
    });
    if (updateInProfile) {
      return updateProfile(dispatch, firebase, authUpdate);
    }
    return payload;
  }).catch(function (error) {
    dispatch({ type: _constants.actionTypes.AUTH_UPDATE_ERROR, error: error });
    return Promise.reject(error);
  });
};

var updateEmail = exports.updateEmail = function updateEmail(dispatch, firebase, newEmail, updateInProfile) {
  dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_START, payload: newEmail });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to update email.');
    dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_ERROR, error: error });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.updateEmail(newEmail).then(function (payload) {
    dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_SUCCESS, payload: newEmail });
    if (updateInProfile) {
      return updateProfile(dispatch, firebase, { email: newEmail });
    }
    return payload;
  }).catch(function (error) {
    dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_ERROR, error: error });
    return Promise.reject(error);
  });
};

var reloadAuth = exports.reloadAuth = function reloadAuth(dispatch, firebase) {
  dispatch({ type: _constants.actionTypes.AUTH_RELOAD_START });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to reload auth.');
    dispatch({ type: _constants.actionTypes.AUTH_RELOAD_ERROR, error: error });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.reload().then(function () {
    var auth = firebase.auth().currentUser;
    dispatch({ type: _constants.actionTypes.AUTH_RELOAD_SUCCESS, payload: auth });
    return auth;
  }).catch(function (error) {
    dispatch({ type: _constants.actionTypes.AUTH_RELOAD_ERROR, error: error });
    return Promise.reject(error);
  });
};

var linkWithCredential = exports.linkWithCredential = function linkWithCredential(dispatch, firebase, credential) {
  dispatch({ type: _constants.actionTypes.AUTH_LINK_START });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to link with credential.');
    dispatch({ type: _constants.actionTypes.AUTH_LINK_ERROR, error: error });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.linkWithCredential(credential).then(function (auth) {
    dispatch({ type: _constants.actionTypes.AUTH_LINK_SUCCESS, payload: auth });
    return auth;
  }).catch(function (error) {
    dispatch({ type: _constants.actionTypes.AUTH_LINK_ERROR, error: error });
    return Promise.reject(error);
  });
};

function linkWithAuthDispatch(promiseFunc, args, dispatch, firebase) {
  dispatch({ type: _constants.actionTypes.AUTH_LINK_START });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to link with credential.');
    dispatch({ type: _constants.actionTypes.AUTH_LINK_ERROR, error: error });
    return Promise.reject(error);
  }

  return promiseFunc.apply(undefined, _toConsumableArray(args)).then(function (auth) {
    dispatch({ type: _constants.actionTypes.AUTH_LINK_SUCCESS, payload: auth });
    return auth;
  }).catch(function (error) {
    dispatch({ type: _constants.actionTypes.AUTH_LINK_ERROR, error: error });
    return Promise.reject(error);
  });
}

function linkAndRetrieveDataWithCredential(dispatch, firebase, credential) {
  return linkWithAuthDispatch(firebase.auth().currentUser.linkAndRetrieveDataWithCredential, [credential], dispatch, firebase);
}

function linkWithPopup(dispatch, firebase, credential) {
  return linkWithAuthDispatch(firebase.auth().currentUser.linkWithPopup, [credential], dispatch, firebase);
}

function linkWithRedirect(dispatch, firebase, provider) {
  return linkWithAuthDispatch(firebase.auth().currentUser.linkWithRedirect, [provider], dispatch, firebase);
}

var signInWithPhoneNumber = exports.signInWithPhoneNumber = function signInWithPhoneNumber(firebase, dispatch, phoneNumber, applicationVerifier) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  return login(dispatch, firebase, _extends({
    phoneNumber: phoneNumber,
    applicationVerifier: applicationVerifier
  }, options));
};

exports.default = {
  dispatchLoginError: dispatchLoginError,
  unWatchUserProfile: unWatchUserProfile,
  watchUserProfile: watchUserProfile,
  init: init,
  createUserProfile: createUserProfile,
  login: login,
  logout: logout,
  createUser: createUser,
  resetPassword: resetPassword,
  confirmPasswordReset: confirmPasswordReset,
  verifyPasswordResetCode: verifyPasswordResetCode,
  updateAuth: updateAuth,
  updateProfile: updateProfile,
  updateEmail: updateEmail,
  reloadAuth: reloadAuth,
  signInWithPhoneNumber: signInWithPhoneNumber
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var basePickBy = __webpack_require__(66),
    hasIn = __webpack_require__(114);

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(115),
    hasPath = __webpack_require__(116);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),
/* 115 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(7),
    isArguments = __webpack_require__(30),
    isArray = __webpack_require__(0),
    isIndex = __webpack_require__(28),
    isLength = __webpack_require__(60),
    toKey = __webpack_require__(11);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(29);

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var isPlainObject = __webpack_require__(45);

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;


/***/ }),
/* 119 */
/***/ (function(module, exports) {

/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = compact;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(43),
    baseRest = __webpack_require__(46),
    customDefaultsMerge = __webpack_require__(122),
    mergeWith = __webpack_require__(136);

/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */
var defaultsDeep = baseRest(function(args) {
  args.push(undefined, customDefaultsMerge);
  return apply(mergeWith, undefined, args);
});

module.exports = defaultsDeep;


/***/ }),
/* 121 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var baseMerge = __webpack_require__(73),
    isObject = __webpack_require__(2);

/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */
function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    stack['delete'](srcValue);
  }
  return objValue;
}

module.exports = customDefaultsMerge;


/***/ }),
/* 123 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(20);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(20);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(20);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(20);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var assignMergeValue = __webpack_require__(75),
    cloneBuffer = __webpack_require__(129),
    cloneTypedArray = __webpack_require__(131),
    copyArray = __webpack_require__(76),
    initCloneObject = __webpack_require__(134),
    isArguments = __webpack_require__(30),
    isArray = __webpack_require__(0),
    isArrayLikeObject = __webpack_require__(79),
    isBuffer = __webpack_require__(80),
    isFunction = __webpack_require__(3),
    isObject = __webpack_require__(2),
    isPlainObject = __webpack_require__(45),
    isTypedArray = __webpack_require__(81),
    safeGet = __webpack_require__(82),
    toPlainObject = __webpack_require__(135);

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(12);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(130)(module)))

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(132);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(133);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(12);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(77),
    getPrototype = __webpack_require__(70),
    isPrototype = __webpack_require__(78);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(19),
    keysIn = __webpack_require__(83);

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var baseMerge = __webpack_require__(73),
    createAssigner = __webpack_require__(84);

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

module.exports = mergeWith;


/***/ }),
/* 137 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),
/* 139 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(48),
    func = convert('unset', __webpack_require__(156));

func.placeholder = __webpack_require__(21);
module.exports = func;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var mapping = __webpack_require__(142),
    fallbackHolder = __webpack_require__(21);

/** Built-in value reference. */
var push = Array.prototype.push;

/**
 * Creates a function, with an arity of `n`, that invokes `func` with the
 * arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} n The arity of the new function.
 * @returns {Function} Returns the new function.
 */
function baseArity(func, n) {
  return n == 2
    ? function(a, b) { return func.apply(undefined, arguments); }
    : function(a) { return func.apply(undefined, arguments); };
}

/**
 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
 * any additional arguments.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @param {number} n The arity cap.
 * @returns {Function} Returns the new function.
 */
function baseAry(func, n) {
  return n == 2
    ? function(a, b) { return func(a, b); }
    : function(a) { return func(a); };
}

/**
 * Creates a clone of `array`.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the cloned array.
 */
function cloneArray(array) {
  var length = array ? array.length : 0,
      result = Array(length);

  while (length--) {
    result[length] = array[length];
  }
  return result;
}

/**
 * Creates a function that clones a given object using the assignment `func`.
 *
 * @private
 * @param {Function} func The assignment function.
 * @returns {Function} Returns the new cloner function.
 */
function createCloner(func) {
  return function(object) {
    return func({}, object);
  };
}

/**
 * A specialized version of `_.spread` which flattens the spread array into
 * the arguments of the invoked `func`.
 *
 * @private
 * @param {Function} func The function to spread arguments over.
 * @param {number} start The start position of the spread.
 * @returns {Function} Returns the new function.
 */
function flatSpread(func, start) {
  return function() {
    var length = arguments.length,
        lastIndex = length - 1,
        args = Array(length);

    while (length--) {
      args[length] = arguments[length];
    }
    var array = args[start],
        otherArgs = args.slice(0, start);

    if (array) {
      push.apply(otherArgs, array);
    }
    if (start != lastIndex) {
      push.apply(otherArgs, args.slice(start + 1));
    }
    return func.apply(this, otherArgs);
  };
}

/**
 * Creates a function that wraps `func` and uses `cloner` to clone the first
 * argument it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} cloner The function to clone arguments.
 * @returns {Function} Returns the new immutable function.
 */
function wrapImmutable(func, cloner) {
  return function() {
    var length = arguments.length;
    if (!length) {
      return;
    }
    var args = Array(length);
    while (length--) {
      args[length] = arguments[length];
    }
    var result = args[0] = cloner.apply(undefined, args);
    func.apply(undefined, args);
    return result;
  };
}

/**
 * The base implementation of `convert` which accepts a `util` object of methods
 * required to perform conversions.
 *
 * @param {Object} util The util object.
 * @param {string} name The name of the function to convert.
 * @param {Function} func The function to convert.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
 * @param {boolean} [options.curry=true] Specify currying.
 * @param {boolean} [options.fixed=true] Specify fixed arity.
 * @param {boolean} [options.immutable=true] Specify immutable operations.
 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
 * @returns {Function|Object} Returns the converted function or object.
 */
function baseConvert(util, name, func, options) {
  var isLib = typeof name == 'function',
      isObj = name === Object(name);

  if (isObj) {
    options = func;
    func = name;
    name = undefined;
  }
  if (func == null) {
    throw new TypeError;
  }
  options || (options = {});

  var config = {
    'cap': 'cap' in options ? options.cap : true,
    'curry': 'curry' in options ? options.curry : true,
    'fixed': 'fixed' in options ? options.fixed : true,
    'immutable': 'immutable' in options ? options.immutable : true,
    'rearg': 'rearg' in options ? options.rearg : true
  };

  var defaultHolder = isLib ? func : fallbackHolder,
      forceCurry = ('curry' in options) && options.curry,
      forceFixed = ('fixed' in options) && options.fixed,
      forceRearg = ('rearg' in options) && options.rearg,
      pristine = isLib ? func.runInContext() : undefined;

  var helpers = isLib ? func : {
    'ary': util.ary,
    'assign': util.assign,
    'clone': util.clone,
    'curry': util.curry,
    'forEach': util.forEach,
    'isArray': util.isArray,
    'isError': util.isError,
    'isFunction': util.isFunction,
    'isWeakMap': util.isWeakMap,
    'iteratee': util.iteratee,
    'keys': util.keys,
    'rearg': util.rearg,
    'toInteger': util.toInteger,
    'toPath': util.toPath
  };

  var ary = helpers.ary,
      assign = helpers.assign,
      clone = helpers.clone,
      curry = helpers.curry,
      each = helpers.forEach,
      isArray = helpers.isArray,
      isError = helpers.isError,
      isFunction = helpers.isFunction,
      isWeakMap = helpers.isWeakMap,
      keys = helpers.keys,
      rearg = helpers.rearg,
      toInteger = helpers.toInteger,
      toPath = helpers.toPath;

  var aryMethodKeys = keys(mapping.aryMethod);

  var wrappers = {
    'castArray': function(castArray) {
      return function() {
        var value = arguments[0];
        return isArray(value)
          ? castArray(cloneArray(value))
          : castArray.apply(undefined, arguments);
      };
    },
    'iteratee': function(iteratee) {
      return function() {
        var func = arguments[0],
            arity = arguments[1],
            result = iteratee(func, arity),
            length = result.length;

        if (config.cap && typeof arity == 'number') {
          arity = arity > 2 ? (arity - 2) : 1;
          return (length && length <= arity) ? result : baseAry(result, arity);
        }
        return result;
      };
    },
    'mixin': function(mixin) {
      return function(source) {
        var func = this;
        if (!isFunction(func)) {
          return mixin(func, Object(source));
        }
        var pairs = [];
        each(keys(source), function(key) {
          if (isFunction(source[key])) {
            pairs.push([key, func.prototype[key]]);
          }
        });

        mixin(func, Object(source));

        each(pairs, function(pair) {
          var value = pair[1];
          if (isFunction(value)) {
            func.prototype[pair[0]] = value;
          } else {
            delete func.prototype[pair[0]];
          }
        });
        return func;
      };
    },
    'nthArg': function(nthArg) {
      return function(n) {
        var arity = n < 0 ? 1 : (toInteger(n) + 1);
        return curry(nthArg(n), arity);
      };
    },
    'rearg': function(rearg) {
      return function(func, indexes) {
        var arity = indexes ? indexes.length : 0;
        return curry(rearg(func, indexes), arity);
      };
    },
    'runInContext': function(runInContext) {
      return function(context) {
        return baseConvert(util, runInContext(context), options);
      };
    }
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Casts `func` to a function with an arity capped iteratee if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @returns {Function} Returns the cast function.
   */
  function castCap(name, func) {
    if (config.cap) {
      var indexes = mapping.iterateeRearg[name];
      if (indexes) {
        return iterateeRearg(func, indexes);
      }
      var n = !isLib && mapping.iterateeAry[name];
      if (n) {
        return iterateeAry(func, n);
      }
    }
    return func;
  }

  /**
   * Casts `func` to a curried function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */
  function castCurry(name, func, n) {
    return (forceCurry || (config.curry && n > 1))
      ? curry(func, n)
      : func;
  }

  /**
   * Casts `func` to a fixed arity function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the cast function.
   */
  function castFixed(name, func, n) {
    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
      var data = mapping.methodSpread[name],
          start = data && data.start;

      return start  === undefined ? ary(func, n) : flatSpread(func, start);
    }
    return func;
  }

  /**
   * Casts `func` to an rearged function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */
  function castRearg(name, func, n) {
    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
      : func;
  }

  /**
   * Creates a clone of `object` by `path`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {Array|string} path The path to clone by.
   * @returns {Object} Returns the cloned object.
   */
  function cloneByPath(object, path) {
    path = toPath(path);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        result = clone(Object(object)),
        nested = result;

    while (nested != null && ++index < length) {
      var key = path[index],
          value = nested[key];

      if (value != null &&
          !(isFunction(value) || isError(value) || isWeakMap(value))) {
        nested[key] = clone(index == lastIndex ? value : Object(value));
      }
      nested = nested[key];
    }
    return result;
  }

  /**
   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
   * version with conversion `options` applied.
   *
   * @param {Object} [options] The options object. See `baseConvert` for more details.
   * @returns {Function} Returns the converted `lodash`.
   */
  function convertLib(options) {
    return _.runInContext.convert(options)(undefined);
  }

  /**
   * Create a converter function for `func` of `name`.
   *
   * @param {string} name The name of the function to convert.
   * @param {Function} func The function to convert.
   * @returns {Function} Returns the new converter function.
   */
  function createConverter(name, func) {
    var realName = mapping.aliasToReal[name] || name,
        methodName = mapping.remap[realName] || realName,
        oldOptions = options;

    return function(options) {
      var newUtil = isLib ? pristine : helpers,
          newFunc = isLib ? pristine[methodName] : func,
          newOptions = assign(assign({}, oldOptions), options);

      return baseConvert(newUtil, realName, newFunc, newOptions);
    };
  }

  /**
   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
   * arguments, ignoring any additional arguments.
   *
   * @private
   * @param {Function} func The function to cap iteratee arguments for.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the new function.
   */
  function iterateeAry(func, n) {
    return overArg(func, function(func) {
      return typeof func == 'function' ? baseAry(func, n) : func;
    });
  }

  /**
   * Creates a function that wraps `func` to invoke its iteratee with arguments
   * arranged according to the specified `indexes` where the argument value at
   * the first index is provided as the first argument, the argument value at
   * the second index is provided as the second argument, and so on.
   *
   * @private
   * @param {Function} func The function to rearrange iteratee arguments for.
   * @param {number[]} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   */
  function iterateeRearg(func, indexes) {
    return overArg(func, function(func) {
      var n = indexes.length;
      return baseArity(rearg(baseAry(func, n), indexes), n);
    });
  }

  /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function() {
      var length = arguments.length;
      if (!length) {
        return func();
      }
      var args = Array(length);
      while (length--) {
        args[length] = arguments[length];
      }
      var index = config.rearg ? 0 : (length - 1);
      args[index] = transform(args[index]);
      return func.apply(undefined, args);
    };
  }

  /**
   * Creates a function that wraps `func` and applys the conversions
   * rules by `name`.
   *
   * @private
   * @param {string} name The name of the function to wrap.
   * @param {Function} func The function to wrap.
   * @returns {Function} Returns the converted function.
   */
  function wrap(name, func, placeholder) {
    var result,
        realName = mapping.aliasToReal[name] || name,
        wrapped = func,
        wrapper = wrappers[realName];

    if (wrapper) {
      wrapped = wrapper(func);
    }
    else if (config.immutable) {
      if (mapping.mutate.array[realName]) {
        wrapped = wrapImmutable(func, cloneArray);
      }
      else if (mapping.mutate.object[realName]) {
        wrapped = wrapImmutable(func, createCloner(func));
      }
      else if (mapping.mutate.set[realName]) {
        wrapped = wrapImmutable(func, cloneByPath);
      }
    }
    each(aryMethodKeys, function(aryKey) {
      each(mapping.aryMethod[aryKey], function(otherName) {
        if (realName == otherName) {
          var data = mapping.methodSpread[realName],
              afterRearg = data && data.afterRearg;

          result = afterRearg
            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);

          result = castCap(realName, result);
          result = castCurry(realName, result, aryKey);
          return false;
        }
      });
      return !result;
    });

    result || (result = wrapped);
    if (result == func) {
      result = forceCurry ? curry(result, 1) : function() {
        return func.apply(this, arguments);
      };
    }
    result.convert = createConverter(realName, func);
    result.placeholder = func.placeholder = placeholder;

    return result;
  }

  /*--------------------------------------------------------------------------*/

  if (!isObj) {
    return wrap(name, func, defaultHolder);
  }
  var _ = func;

  // Convert methods by ary cap.
  var pairs = [];
  each(aryMethodKeys, function(aryKey) {
    each(mapping.aryMethod[aryKey], function(key) {
      var func = _[mapping.remap[key] || key];
      if (func) {
        pairs.push([key, wrap(key, func, _)]);
      }
    });
  });

  // Convert remaining methods.
  each(keys(_), function(key) {
    var func = _[key];
    if (typeof func == 'function') {
      var length = pairs.length;
      while (length--) {
        if (pairs[length][0] == key) {
          return;
        }
      }
      func.convert = createConverter(key, func);
      pairs.push([key, func]);
    }
  });

  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
  each(pairs, function(pair) {
    _[pair[0]] = pair[1];
  });

  _.convert = convertLib;
  _.placeholder = _;

  // Assign aliases.
  each(keys(_), function(key) {
    each(mapping.realToAlias[key] || [], function(alias) {
      _[alias] = _[key];
    });
  });

  return _;
}

module.exports = baseConvert;


/***/ }),
/* 142 */
/***/ (function(module, exports) {

/** Used to map aliases to their real names. */
exports.aliasToReal = {

  // Lodash aliases.
  'each': 'forEach',
  'eachRight': 'forEachRight',
  'entries': 'toPairs',
  'entriesIn': 'toPairsIn',
  'extend': 'assignIn',
  'extendAll': 'assignInAll',
  'extendAllWith': 'assignInAllWith',
  'extendWith': 'assignInWith',
  'first': 'head',

  // Methods that are curried variants of others.
  'conforms': 'conformsTo',
  'matches': 'isMatch',
  'property': 'get',

  // Ramda aliases.
  '__': 'placeholder',
  'F': 'stubFalse',
  'T': 'stubTrue',
  'all': 'every',
  'allPass': 'overEvery',
  'always': 'constant',
  'any': 'some',
  'anyPass': 'overSome',
  'apply': 'spread',
  'assoc': 'set',
  'assocPath': 'set',
  'complement': 'negate',
  'compose': 'flowRight',
  'contains': 'includes',
  'dissoc': 'unset',
  'dissocPath': 'unset',
  'dropLast': 'dropRight',
  'dropLastWhile': 'dropRightWhile',
  'equals': 'isEqual',
  'identical': 'eq',
  'indexBy': 'keyBy',
  'init': 'initial',
  'invertObj': 'invert',
  'juxt': 'over',
  'omitAll': 'omit',
  'nAry': 'ary',
  'path': 'get',
  'pathEq': 'matchesProperty',
  'pathOr': 'getOr',
  'paths': 'at',
  'pickAll': 'pick',
  'pipe': 'flow',
  'pluck': 'map',
  'prop': 'get',
  'propEq': 'matchesProperty',
  'propOr': 'getOr',
  'props': 'at',
  'symmetricDifference': 'xor',
  'symmetricDifferenceBy': 'xorBy',
  'symmetricDifferenceWith': 'xorWith',
  'takeLast': 'takeRight',
  'takeLastWhile': 'takeRightWhile',
  'unapply': 'rest',
  'unnest': 'flatten',
  'useWith': 'overArgs',
  'where': 'conformsTo',
  'whereEq': 'isMatch',
  'zipObj': 'zipObject'
};

/** Used to map ary to method names. */
exports.aryMethod = {
  '1': [
    'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
    'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
    'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
    'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome','rest', 'reverse',
    'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
    'uniqueId', 'words', 'zipAll'
  ],
  '2': [
    'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
    'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
    'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
    'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
    'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
    'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
    'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
    'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
    'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
    'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
    'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
    'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
    'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
    'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
    'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
    'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
    'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
    'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
    'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
    'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
    'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
    'zipObjectDeep'
  ],
  '3': [
    'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
    'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
    'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
    'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
    'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
    'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
    'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
    'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
    'xorWith', 'zipWith'
  ],
  '4': [
    'fill', 'setWith', 'updateWith'
  ]
};

/** Used to map ary to rearg configs. */
exports.aryRearg = {
  '2': [1, 0],
  '3': [2, 0, 1],
  '4': [3, 2, 0, 1]
};

/** Used to map method names to their iteratee ary. */
exports.iterateeAry = {
  'dropRightWhile': 1,
  'dropWhile': 1,
  'every': 1,
  'filter': 1,
  'find': 1,
  'findFrom': 1,
  'findIndex': 1,
  'findIndexFrom': 1,
  'findKey': 1,
  'findLast': 1,
  'findLastFrom': 1,
  'findLastIndex': 1,
  'findLastIndexFrom': 1,
  'findLastKey': 1,
  'flatMap': 1,
  'flatMapDeep': 1,
  'flatMapDepth': 1,
  'forEach': 1,
  'forEachRight': 1,
  'forIn': 1,
  'forInRight': 1,
  'forOwn': 1,
  'forOwnRight': 1,
  'map': 1,
  'mapKeys': 1,
  'mapValues': 1,
  'partition': 1,
  'reduce': 2,
  'reduceRight': 2,
  'reject': 1,
  'remove': 1,
  'some': 1,
  'takeRightWhile': 1,
  'takeWhile': 1,
  'times': 1,
  'transform': 2
};

/** Used to map method names to iteratee rearg configs. */
exports.iterateeRearg = {
  'mapKeys': [1],
  'reduceRight': [1, 0]
};

/** Used to map method names to rearg configs. */
exports.methodRearg = {
  'assignInAllWith': [1, 0],
  'assignInWith': [1, 2, 0],
  'assignAllWith': [1, 0],
  'assignWith': [1, 2, 0],
  'differenceBy': [1, 2, 0],
  'differenceWith': [1, 2, 0],
  'getOr': [2, 1, 0],
  'intersectionBy': [1, 2, 0],
  'intersectionWith': [1, 2, 0],
  'isEqualWith': [1, 2, 0],
  'isMatchWith': [2, 1, 0],
  'mergeAllWith': [1, 0],
  'mergeWith': [1, 2, 0],
  'padChars': [2, 1, 0],
  'padCharsEnd': [2, 1, 0],
  'padCharsStart': [2, 1, 0],
  'pullAllBy': [2, 1, 0],
  'pullAllWith': [2, 1, 0],
  'rangeStep': [1, 2, 0],
  'rangeStepRight': [1, 2, 0],
  'setWith': [3, 1, 2, 0],
  'sortedIndexBy': [2, 1, 0],
  'sortedLastIndexBy': [2, 1, 0],
  'unionBy': [1, 2, 0],
  'unionWith': [1, 2, 0],
  'updateWith': [3, 1, 2, 0],
  'xorBy': [1, 2, 0],
  'xorWith': [1, 2, 0],
  'zipWith': [1, 2, 0]
};

/** Used to map method names to spread configs. */
exports.methodSpread = {
  'assignAll': { 'start': 0 },
  'assignAllWith': { 'start': 0 },
  'assignInAll': { 'start': 0 },
  'assignInAllWith': { 'start': 0 },
  'defaultsAll': { 'start': 0 },
  'defaultsDeepAll': { 'start': 0 },
  'invokeArgs': { 'start': 2 },
  'invokeArgsMap': { 'start': 2 },
  'mergeAll': { 'start': 0 },
  'mergeAllWith': { 'start': 0 },
  'partial': { 'start': 1 },
  'partialRight': { 'start': 1 },
  'without': { 'start': 1 },
  'zipAll': { 'start': 0 }
};

/** Used to identify methods which mutate arrays or objects. */
exports.mutate = {
  'array': {
    'fill': true,
    'pull': true,
    'pullAll': true,
    'pullAllBy': true,
    'pullAllWith': true,
    'pullAt': true,
    'remove': true,
    'reverse': true
  },
  'object': {
    'assign': true,
    'assignAll': true,
    'assignAllWith': true,
    'assignIn': true,
    'assignInAll': true,
    'assignInAllWith': true,
    'assignInWith': true,
    'assignWith': true,
    'defaults': true,
    'defaultsAll': true,
    'defaultsDeep': true,
    'defaultsDeepAll': true,
    'merge': true,
    'mergeAll': true,
    'mergeAllWith': true,
    'mergeWith': true,
  },
  'set': {
    'set': true,
    'setWith': true,
    'unset': true,
    'update': true,
    'updateWith': true
  }
};

/** Used to map real names to their aliases. */
exports.realToAlias = (function() {
  var hasOwnProperty = Object.prototype.hasOwnProperty,
      object = exports.aliasToReal,
      result = {};

  for (var key in object) {
    var value = object[key];
    if (hasOwnProperty.call(result, value)) {
      result[value].push(key);
    } else {
      result[value] = [key];
    }
  }
  return result;
}());

/** Used to map method names to other names. */
exports.remap = {
  'assignAll': 'assign',
  'assignAllWith': 'assignWith',
  'assignInAll': 'assignIn',
  'assignInAllWith': 'assignInWith',
  'curryN': 'curry',
  'curryRightN': 'curryRight',
  'defaultsAll': 'defaults',
  'defaultsDeepAll': 'defaultsDeep',
  'findFrom': 'find',
  'findIndexFrom': 'findIndex',
  'findLastFrom': 'findLast',
  'findLastIndexFrom': 'findLastIndex',
  'getOr': 'get',
  'includesFrom': 'includes',
  'indexOfFrom': 'indexOf',
  'invokeArgs': 'invoke',
  'invokeArgsMap': 'invokeMap',
  'lastIndexOfFrom': 'lastIndexOf',
  'mergeAll': 'merge',
  'mergeAllWith': 'mergeWith',
  'padChars': 'pad',
  'padCharsEnd': 'padEnd',
  'padCharsStart': 'padStart',
  'propertyOf': 'get',
  'rangeStep': 'range',
  'rangeStepRight': 'rangeRight',
  'restFrom': 'rest',
  'spreadFrom': 'spread',
  'trimChars': 'trim',
  'trimCharsEnd': 'trimEnd',
  'trimCharsStart': 'trimStart',
  'zipAll': 'zip'
};

/** Used to track methods that skip fixing their arity. */
exports.skipFixed = {
  'castArray': true,
  'flow': true,
  'flowRight': true,
  'iteratee': true,
  'mixin': true,
  'rearg': true,
  'runInContext': true
};

/** Used to track methods that skip rearranging arguments. */
exports.skipRearg = {
  'add': true,
  'assign': true,
  'assignIn': true,
  'bind': true,
  'bindKey': true,
  'concat': true,
  'difference': true,
  'divide': true,
  'eq': true,
  'gt': true,
  'gte': true,
  'isEqual': true,
  'lt': true,
  'lte': true,
  'matchesProperty': true,
  'merge': true,
  'multiply': true,
  'overArgs': true,
  'partial': true,
  'partialRight': true,
  'propertyOf': true,
  'random': true,
  'range': true,
  'rangeRight': true,
  'subtract': true,
  'zip': true,
  'zipObject': true,
  'zipObjectDeep': true
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  'ary': __webpack_require__(144),
  'assign': __webpack_require__(146),
  'clone': __webpack_require__(147),
  'curry': __webpack_require__(148),
  'forEach': __webpack_require__(149),
  'isArray': __webpack_require__(0),
  'isError': __webpack_require__(150),
  'isFunction': __webpack_require__(3),
  'isWeakMap': __webpack_require__(151),
  'iteratee': __webpack_require__(152),
  'keys': __webpack_require__(59),
  'rearg': __webpack_require__(153),
  'toInteger': __webpack_require__(154),
  'toPath': __webpack_require__(155)
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var createWrap = __webpack_require__(49);

/** Used to compose bitmasks for function metadata. */
var WRAP_ARY_FLAG = 128;

/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */
function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = (func && n == null) ? func.length : n;
  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}

module.exports = ary;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(77),
    isObject = __webpack_require__(2);

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

module.exports = createCtor;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(19),
    keys = __webpack_require__(40);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(44);

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var createWrap = __webpack_require__(49);

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8;

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

// Assign default placeholders.
curry.placeholder = {};

module.exports = curry;


/***/ }),
/* 149 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(4),
    isPlainObject = __webpack_require__(45);

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag ||
    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
}

module.exports = isError;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(37),
    isObjectLike = __webpack_require__(4);

/** `Object#toString` result references. */
var weakMapTag = '[object WeakMap]';

/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */
function isWeakMap(value) {
  return isObjectLike(value) && getTag(value) == weakMapTag;
}

module.exports = isWeakMap;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(44),
    baseIteratee = __webpack_require__(9);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */
function iteratee(func) {
  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
}

module.exports = iteratee;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var createWrap = __webpack_require__(49),
    flatRest = __webpack_require__(42);

/** Used to compose bitmasks for function metadata. */
var WRAP_REARG_FLAG = 256;

/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */
var rearg = flatRest(function(func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});

module.exports = rearg;


/***/ }),
/* 154 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(18),
    copyArray = __webpack_require__(76),
    isArray = __webpack_require__(0),
    isSymbol = __webpack_require__(52),
    stringToPath = __webpack_require__(53),
    toKey = __webpack_require__(11),
    toString = __webpack_require__(10);

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

module.exports = toPath;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var baseUnset = __webpack_require__(25);

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

module.exports = unset;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(4);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike(value) && baseGetTag(value) == boolTag);
}

module.exports = isBoolean;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(10);

/**
 * Replaces matches for `pattern` in `string` with `replacement`.
 *
 * **Note:** This method is based on
 * [`String#replace`](https://mdn.io/String/replace).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to modify.
 * @param {RegExp|string} pattern The pattern to replace.
 * @param {Function|string} replacement The match replacement.
 * @returns {string} Returns the modified string.
 * @example
 *
 * _.replace('Hi Fred', 'Fred', 'Barney');
 * // => 'Hi Barney'
 */
function replace() {
  var args = arguments,
      string = toString(args[0]);

  return args.length < 3 ? string : string.replace(args[1], args[2]);
}

module.exports = replace;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(10),
    upperFirst = __webpack_require__(160);

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

module.exports = capitalize;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var createCaseFirst = __webpack_require__(161);

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

var castSlice = __webpack_require__(162),
    hasUnicode = __webpack_require__(39),
    stringToArray = __webpack_require__(163),
    toString = __webpack_require__(10);

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var baseSlice = __webpack_require__(54);

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var asciiToArray = __webpack_require__(164),
    hasUnicode = __webpack_require__(39),
    unicodeToArray = __webpack_require__(165);

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;


/***/ }),
/* 164 */
/***/ (function(module, exports) {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),
/* 165 */
/***/ (function(module, exports) {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteFile = exports.uploadFiles = exports.uploadFile = undefined;

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _map2 = __webpack_require__(13);

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constants = __webpack_require__(1);

var _actions = __webpack_require__(62);

var _storage = __webpack_require__(167);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var FILE_UPLOAD_START = _constants.actionTypes.FILE_UPLOAD_START,
    FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,
    FILE_UPLOAD_COMPLETE = _constants.actionTypes.FILE_UPLOAD_COMPLETE,
    FILE_DELETE_START = _constants.actionTypes.FILE_DELETE_START,
    FILE_DELETE_ERROR = _constants.actionTypes.FILE_DELETE_ERROR,
    FILE_DELETE_COMPLETE = _constants.actionTypes.FILE_DELETE_COMPLETE;
var uploadFile = exports.uploadFile = function uploadFile(dispatch, firebase, config) {
  if (!firebase.storage) {
    throw new Error('Firebase storage is required to upload files');
  }

  var _ref = config || {},
      path = _ref.path,
      file = _ref.file,
      dbPath = _ref.dbPath,
      _ref$options = _ref.options,
      options = _ref$options === undefined ? { progress: false } : _ref$options;

  var fileMetadata = options.metadata;
  var logErrors = firebase._.config.logErrors;

  var nameFromOptions = (0, _isFunction3.default)(options.name) ? options.name(file, firebase, config) : options.name;
  var filename = nameFromOptions || file.name;

  var meta = _extends({}, config, { filename: filename });

  dispatch({ type: FILE_UPLOAD_START, payload: _extends({}, config, { filename: filename }) });

  var uploadPromise = function uploadPromise() {
    return options.progress ? (0, _storage.uploadFileWithProgress)(dispatch, firebase, {
      path: path,
      file: file,
      filename: filename,
      meta: meta,
      fileMetadata: fileMetadata
    }) : firebase.storage().ref(path + '/' + filename).put(file, fileMetadata);
  };

  return uploadPromise().then(function (uploadTaskSnapshot) {
    if (!dbPath || !firebase.database && !firebase.firestore) {
      dispatch({
        type: FILE_UPLOAD_COMPLETE,
        meta: _extends({}, config, { filename: filename }),
        payload: {
          uploadTaskSnapshot: uploadTaskSnapshot,
          uploadTaskSnaphot: uploadTaskSnapshot }
      });
      return {
        uploadTaskSnapshot: uploadTaskSnapshot,
        uploadTaskSnaphot: uploadTaskSnapshot };
    }

    return (0, _storage.writeMetadataToDb)({
      firebase: firebase,
      uploadTaskSnapshot: uploadTaskSnapshot,
      dbPath: dbPath,
      options: options
    }).then(function (payload) {
      dispatch({
        type: FILE_UPLOAD_COMPLETE,
        meta: _extends({}, config, { filename: filename }),
        payload: payload
      });
      return payload;
    });
  }).catch(function (err) {
    if (logErrors) {
      console.error && console.error('RRF: Error uploading file: ' + (err.message || err), err);
    }
    dispatch({ type: FILE_UPLOAD_ERROR, path: path, payload: err });
    return Promise.reject(err);
  });
};

var uploadFiles = function uploadFiles(dispatch, firebase, _ref2) {
  var files = _ref2.files,
      other = _objectWithoutProperties(_ref2, ['files']);

  return Promise.all((0, _map3.default)(files, function (file) {
    return uploadFile(dispatch, firebase, _extends({ file: file }, other));
  }));
};

exports.uploadFiles = uploadFiles;
var deleteFile = exports.deleteFile = function deleteFile(dispatch, firebase, _ref3) {
  var path = _ref3.path,
      dbPath = _ref3.dbPath;
  return (0, _actions.wrapInDispatch)(dispatch, {
    method: _storage.deleteFile,
    args: [firebase, { path: path, dbPath: dbPath }],
    types: [FILE_DELETE_START, FILE_DELETE_COMPLETE, FILE_DELETE_ERROR]
  });
};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isUndefined2 = __webpack_require__(168);

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _omitBy2 = __webpack_require__(169);

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _isFunction2 = __webpack_require__(3);

var _isFunction3 = _interopRequireDefault(_isFunction2);

exports.deleteFile = deleteFile;
exports.writeMetadataToDb = writeMetadataToDb;
exports.uploadFileWithProgress = uploadFileWithProgress;

var _constants = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,
    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;
function deleteFile(firebase, _ref) {
  var path = _ref.path,
      dbPath = _ref.dbPath;

  return firebase.storage().ref(path).delete().then(function () {
    if (!dbPath || !firebase.database && !firebase.firestore) {
      return { path: path };
    }

    var metaDeletePromise = function metaDeletePromise() {
      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();
    };

    return metaDeletePromise().then(function () {
      return { path: path, dbPath: dbPath };
    });
  });
}

function createUploadMetaResponseHandler(_ref2) {
  var fileData = _ref2.fileData,
      firebase = _ref2.firebase,
      uploadTaskSnapshot = _ref2.uploadTaskSnapshot,
      downloadURL = _ref2.downloadURL;

  return function uploadResultFromSnap(metaDataSnapshot) {
    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;

    var result = {
      snapshot: metaDataSnapshot,
      key: metaDataSnapshot.key || metaDataSnapshot.id,
      File: fileData,
      metaDataSnapshot: metaDataSnapshot,
      uploadTaskSnapshot: uploadTaskSnapshot,

      uploadTaskSnaphot: uploadTaskSnapshot,
      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP
    };

    if (metaDataSnapshot.id) {
      result.id = metaDataSnapshot.id;
    }

    if (downloadURL) {
      result.downloadURL = downloadURL;
    }
    return result;
  };
}

function getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot) {
  if (uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function') {
    return uploadTaskSnapshot.ref.getDownloadURL();
  }

  return Promise.resolve(uploadTaskSnapshot.downloadURLs && uploadTaskSnapshot.downloadURLs[0]);
}

function writeMetadataToDb(_ref3) {
  var firebase = _ref3.firebase,
      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,
      dbPath = _ref3.dbPath,
      options = _ref3.options;
  var _firebase$_$config = firebase._.config,
      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,
      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;
  var metadataFactory = options.metadataFactory;

  var metaFactoryFunction = metadataFactory || fileMetadataFactory;

  return getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot).then(function (downloadURL) {
    var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata, downloadURL) : (0, _omitBy3.default)(uploadTaskSnapshot.metadata, _isUndefined3.default);

    var resultFromSnap = createUploadMetaResponseHandler({
      fileData: fileData,
      firebase: firebase,
      uploadTaskSnapshot: uploadTaskSnapshot,
      downloadURL: downloadURL
    });

    var metaSetPromise = function metaSetPromise(fileData) {
      if (useFirestoreForStorageMeta) {
        return firebase.firestore().collection(dbPath).add(fileData);
      }

      var newMetaRef = firebase.database().ref(dbPath).push();

      return newMetaRef.set(fileData).then(function (res) {
        return newMetaRef;
      });
    };

    return metaSetPromise(fileData).then(resultFromSnap);
  });
}

function uploadFileWithProgress(dispatch, firebase, _ref4) {
  var path = _ref4.path,
      file = _ref4.file,
      filename = _ref4.filename,
      meta = _ref4.meta,
      fileMetadata = _ref4.fileMetadata;

  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file, fileMetadata);

  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {
    next: function next(snapshot) {
      dispatch({
        type: FILE_UPLOAD_PROGRESS,
        meta: meta,
        payload: {
          snapshot: snapshot,
          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)
        }
      });
    },
    error: function error(err) {
      dispatch({ type: FILE_UPLOAD_ERROR, meta: meta, payload: err });
      unListen();
    },
    complete: function complete() {
      unListen();
    }
  });
  return uploadEvent;
}

/***/ }),
/* 168 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

var baseIteratee = __webpack_require__(9),
    negate = __webpack_require__(170),
    pickBy = __webpack_require__(171);

/**
 * The opposite of `_.pickBy`; this method creates an object composed of
 * the own and inherited enumerable string keyed properties of `object` that
 * `predicate` doesn't return truthy for. The predicate is invoked with two
 * arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omitBy(object, _.isNumber);
 * // => { 'b': '2' }
 */
function omitBy(object, predicate) {
  return pickBy(object, negate(baseIteratee(predicate)));
}

module.exports = omitBy;


/***/ }),
/* 170 */
/***/ (function(module, exports) {

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

module.exports = negate;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(18),
    baseIteratee = __webpack_require__(9),
    basePickBy = __webpack_require__(66),
    getAllKeysIn = __webpack_require__(71);

/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = arrayMap(getAllKeysIn(object), function(prop) {
    return [prop];
  });
  predicate = baseIteratee(predicate);
  return basePickBy(object, props, function(value, path) {
    return predicate(value, path[0]);
  });
}

module.exports = pickBy;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFirebaseConnect = undefined;

var _differenceWith2 = __webpack_require__(173);

var _differenceWith3 = _interopRequireDefault(_differenceWith2);

var _isEqual2 = __webpack_require__(89);

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(22);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(23);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(24);

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _query = __webpack_require__(85);

var _utils = __webpack_require__(8);

var _constants = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createFirebaseConnect = exports.createFirebaseConnect = function createFirebaseConnect() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function () {
    var dataOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return function (WrappedComponent) {
      var FirebaseConnect = function (_Component) {
        _inherits(FirebaseConnect, _Component);

        function FirebaseConnect() {
          var _ref;

          var _temp, _this, _ret;

          _classCallCheck(this, FirebaseConnect);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FirebaseConnect.__proto__ || Object.getPrototypeOf(FirebaseConnect)).call.apply(_ref, [this].concat(args))), _this), _this.firebaseEvents = [], _this.firebase = null, _this.prevData = null, _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(FirebaseConnect, [{
          key: 'UNSAFE_componentWillMount',
          value: function UNSAFE_componentWillMount() {
            if (!this.context || !this.context[storeKey]) {
              throw new Error(_constants.v3ErrorMessage);
            }
            var _store = this.store,
                firebase = _store.firebase,
                dispatch = _store.dispatch;

            var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
            this.prevData = inputAsFunc(this.props, this.store);

            var ref = firebase.ref,
                helpers = firebase.helpers,
                storage = firebase.storage,
                database = firebase.database,
                auth = firebase.auth;

            this.firebase = _extends({ ref: ref, storage: storage, database: database, auth: auth }, helpers);

            this._firebaseEvents = (0, _utils.getEventsFromInput)(this.prevData);

            (0, _query.watchEvents)(firebase, dispatch, this._firebaseEvents);
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            var _store2 = this.store,
                firebase = _store2.firebase,
                dispatch = _store2.dispatch;

            (0, _query.unWatchEvents)(firebase, dispatch, this._firebaseEvents);
          }
        }, {
          key: 'UNSAFE_componentWillReceiveProps',
          value: function UNSAFE_componentWillReceiveProps(np) {
            var _store3 = this.store,
                firebase = _store3.firebase,
                dispatch = _store3.dispatch;

            var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
            var data = inputAsFunc(np, this.store);

            if (!(0, _isEqual3.default)(data, this.prevData)) {
              var itemsToSubscribe = (0, _differenceWith3.default)(data, this.prevData, _isEqual3.default);
              var itemsToUnsubscribe = (0, _differenceWith3.default)(this.prevData, data, _isEqual3.default);

              this.prevData = data;

              (0, _query.unWatchEvents)(firebase, dispatch, (0, _utils.getEventsFromInput)(itemsToUnsubscribe));

              this._firebaseEvents = (0, _utils.getEventsFromInput)(data);

              (0, _query.watchEvents)(firebase, dispatch, (0, _utils.getEventsFromInput)(itemsToSubscribe));
            }
          }
        }, {
          key: 'render',
          value: function render() {
            return _react2.default.createElement(WrappedComponent, _extends({}, this.props, this.state, {
              firebase: this.firebase
            }));
          }
        }]);

        return FirebaseConnect;
      }(_react.Component);

      FirebaseConnect.displayName = 'FirebaseConnect(' + (0, _utils.getDisplayName)(WrappedComponent) + ')';
      FirebaseConnect.wrappedComponent = WrappedComponent;
      FirebaseConnect.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);


      return (0, _hoistNonReactStatics2.default)(FirebaseConnect, WrappedComponent);
    };
  };
};

exports.default = createFirebaseConnect();

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var baseDifference = __webpack_require__(174),
    baseFlatten = __webpack_require__(29),
    baseRest = __webpack_require__(46),
    isArrayLikeObject = __webpack_require__(79),
    last = __webpack_require__(26);

/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */
var differenceWith = baseRest(function(array, values) {
  var comparator = last(values);
  if (isArrayLikeObject(comparator)) {
    comparator = undefined;
  }
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
    : [];
});

module.exports = differenceWith;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(86),
    arrayIncludes = __webpack_require__(175),
    arrayIncludesWith = __webpack_require__(176),
    arrayMap = __webpack_require__(18),
    baseUnary = __webpack_require__(177),
    cacheHas = __webpack_require__(88);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(87);

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),
/* 176 */
/***/ (function(module, exports) {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;


/***/ }),
/* 177 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(179),
    isObjectLike = __webpack_require__(4);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(74),
    equalArrays = __webpack_require__(180),
    equalByTag = __webpack_require__(182),
    equalObjects = __webpack_require__(183),
    getTag = __webpack_require__(37),
    isArray = __webpack_require__(0),
    isBuffer = __webpack_require__(80),
    isTypedArray = __webpack_require__(81);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(86),
    arraySome = __webpack_require__(181),
    cacheHas = __webpack_require__(88);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),
/* 181 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),
/* 182 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(184);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(17);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {
  module.exports = require('./cjs/react-is.production.min.js');
} else {
  module.exports = __webpack_require__(186);
}


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.9.0
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
// TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;
    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;
          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;
              default:
                return $$typeof;
            }
        }
      case REACT_LAZY_TYPE:
      case REACT_MEMO_TYPE:
      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
}

// AsyncMode is deprecated along with isAsyncMode
var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;

var hasWarnedAboutDeprecatedIsAsyncMode = false;

// AsyncMode should be deprecated
function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }
  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFirestoreConnect = undefined;

var _filter2 = __webpack_require__(57);

var _filter3 = _interopRequireDefault(_filter2);

var _some2 = __webpack_require__(31);

var _some3 = _interopRequireDefault(_some2);

var _isEqual2 = __webpack_require__(89);

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(22);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(23);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(24);

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _utils = __webpack_require__(8);

var _constants = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createFirestoreConnect = exports.createFirestoreConnect = function createFirestoreConnect() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function () {
    var dataOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return function (WrappedComponent) {
      var FirestoreConnect = function (_Component) {
        _inherits(FirestoreConnect, _Component);

        function FirestoreConnect() {
          var _ref;

          var _temp, _this, _ret;

          _classCallCheck(this, FirestoreConnect);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FirestoreConnect.__proto__ || Object.getPrototypeOf(FirestoreConnect)).call.apply(_ref, [this].concat(args))), _this), _this.prevData = null, _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(FirestoreConnect, [{
          key: 'UNSAFE_componentWillMount',
          value: function UNSAFE_componentWillMount() {
            if (!this.context || !this.context[storeKey]) {
              throw new Error(_constants.v3ErrorMessage);
            }
            var firestore = this.store.firestore;

            if (this.firestoreIsEnabled) {
              var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
              this.prevData = inputAsFunc(this.props, this.store);

              firestore.setListeners(this.prevData);
            }
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            var firestore = this.store.firestore;

            if (this.firestoreIsEnabled && this.prevData) {
              firestore.unsetListeners(this.prevData);
            }
          }
        }, {
          key: 'UNSAFE_componentWillReceiveProps',
          value: function UNSAFE_componentWillReceiveProps(np) {
            var firestore = this.store.firestore;

            var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
            var data = inputAsFunc(np, this.store);

            if (this.firestoreIsEnabled && !(0, _isEqual3.default)(data, this.prevData)) {
              var changes = this.getChanges(data, this.prevData);

              this.prevData = data;

              firestore.unsetListeners(changes.removed);

              firestore.setListeners(changes.added);
            }
          }
        }, {
          key: 'getChanges',
          value: function getChanges() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var prevData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var result = {};
            result.added = (0, _filter3.default)(data, function (d) {
              return !(0, _some3.default)(prevData, function (p) {
                return (0, _isEqual3.default)(d, p);
              });
            });
            result.removed = (0, _filter3.default)(prevData, function (p) {
              return !(0, _some3.default)(data, function (d) {
                return (0, _isEqual3.default)(p, d);
              });
            });
            return result;
          }
        }, {
          key: 'render',
          value: function render() {
            var _store = this.store,
                firebase = _store.firebase,
                firestore = _store.firestore;

            var newProps = _extends({}, this.props, { firestore: firestore });
            if (firebase) {
              newProps.firebase = _extends({}, firebase, firebase.helpers);
            }
            return _react2.default.createElement(WrappedComponent, newProps);
          }
        }, {
          key: 'firestoreIsEnabled',
          get: function get() {
            return !!this.store.firestore;
          }
        }]);

        return FirestoreConnect;
      }(_react.Component);

      FirestoreConnect.wrappedComponent = WrappedComponent;
      FirestoreConnect.displayName = (0, _utils.wrapDisplayName)(WrappedComponent, 'FirestoreConnect');
      FirestoreConnect.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);


      return (0, _hoistNonReactStatics2.default)(FirestoreConnect, WrappedComponent);
    };
  };
};

exports.default = createFirestoreConnect();

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithFirebase = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(22);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(23);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(24);

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _utils = __webpack_require__(8);

var _constants = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createWithFirebase = exports.createWithFirebase = function createWithFirebase() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function (WrappedComponent) {
    var withFirebase = function (_Component) {
      _inherits(withFirebase, _Component);

      function withFirebase() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, withFirebase);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = withFirebase.__proto__ || Object.getPrototypeOf(withFirebase)).call.apply(_ref, [this].concat(args))), _this), _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(withFirebase, [{
        key: 'render',
        value: function render() {
          if (!this.context || !this.context[storeKey]) {
            throw new Error(_constants.v3ErrorMessage);
          }
          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, this.state, {
            dispatch: this.store.dispatch,
            firebase: this.store.firebase
          }));
        }
      }]);

      return withFirebase;
    }(_react.Component);

    withFirebase.wrappedComponent = WrappedComponent;
    withFirebase.displayName = (0, _utils.wrapDisplayName)(WrappedComponent, 'withFirebase');
    withFirebase.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);


    return (0, _hoistNonReactStatics2.default)(withFirebase, WrappedComponent);
  };
};

exports.default = createWithFirebase();

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithFirestore = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(22);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(23);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(24);

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _utils = __webpack_require__(8);

var _constants = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createWithFirestore = exports.createWithFirestore = function createWithFirestore() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function (WrappedComponent) {
    var withFirestore = function (_Component) {
      _inherits(withFirestore, _Component);

      function withFirestore() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, withFirestore);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = withFirestore.__proto__ || Object.getPrototypeOf(withFirestore)).call.apply(_ref, [this].concat(args))), _this), _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(withFirestore, [{
        key: 'render',
        value: function render() {
          if (!this.context || !this.context[storeKey]) {
            throw new Error(_constants.v3ErrorMessage);
          }
          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
            dispatch: this.store.dispatch,
            firestore: this.store.firestore,
            firebase: this.store.firebase
          }));
        }
      }]);

      return withFirestore;
    }(_react.Component);

    withFirestore.wrappedComponent = WrappedComponent;
    withFirestore.displayName = (0, _utils.wrapDisplayName)(WrappedComponent, 'withFirestore');
    withFirestore.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);


    return (0, _hoistNonReactStatics2.default)(withFirestore, WrappedComponent);
  };
};

exports.default = createWithFirestore();

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFirebase = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createFirebaseInstance = __webpack_require__(51);

var _auth = __webpack_require__(50);

var _constants = __webpack_require__(1);

var _actions = __webpack_require__(65);

var firebaseInstance = void 0;

exports.default = function (instance, otherConfig) {
  return function (next) {
    return function (reducer, initialState, middleware) {
      var store = next(reducer, initialState, middleware);

      if (!instance.SDK_VERSION && !instance.firebase_ && !instance.database) {
        throw new Error('v2.0.0-beta and higher require passing a firebase app instance or a firebase library instance. View the migration guide for details.');
      }

      var existingConfig = instance && instance._ || {};

      var configs = _extends({}, existingConfig, _constants.defaultConfig, otherConfig);

      firebaseInstance = (0, _createFirebaseInstance.createFirebaseInstance)(instance.firebase_ || instance, configs, store.dispatch);

      _actions.authActions.init(store.dispatch, firebaseInstance);

      store.firebase = firebaseInstance;

      if (configs.attachAuthIsReady) {
        store.firebaseAuthIsReady = (0, _auth.createAuthIsReady)(store, configs);
      }

      return store;
    };
  };
};

var getFirebase = exports.getFirebase = function getFirebase() {
  if (!firebaseInstance) {
    throw new Error('Firebase instance does not yet exist. Check your compose function.');
  }

  return firebaseInstance;
};

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reducers = __webpack_require__(47);

var _reducers2 = __webpack_require__(192);

exports.default = (0, _reducers.combineReducers)({
  requesting: _reducers2.requestingReducer,
  requested: _reducers2.requestedReducer,
  timestamps: _reducers2.timestampsReducer,
  data: _reducers2.dataReducer,
  ordered: _reducers2.orderedReducer,
  auth: _reducers2.authReducer,
  authError: _reducers2.authErrorReducer,
  profile: _reducers2.profileReducer,
  listeners: _reducers2.listenersReducer,
  isInitializing: _reducers2.isInitializingReducer,
  errors: _reducers2.errorsReducer
});
module.exports = exports.default;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orderedReducer = exports.dataReducer = exports.listenersReducer = exports.errorsReducer = exports.profileReducer = exports.authErrorReducer = exports.authReducer = exports.timestampsReducer = exports.requestedReducer = exports.requestingReducer = exports.isInitializingReducer = undefined;

var _assign2 = __webpack_require__(193);

var _assign3 = _interopRequireDefault(_assign2);

var _setWith2 = __webpack_require__(195);

var _setWith3 = _interopRequireDefault(_setWith2);

var _isObject2 = __webpack_require__(2);

var _isObject3 = _interopRequireDefault(_isObject2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _get2 = __webpack_require__(16);

var _get3 = _interopRequireDefault(_get2);

var _omit2 = __webpack_require__(69);

var _omit3 = _interopRequireDefault(_omit2);

var _pick2 = __webpack_require__(41);

var _pick3 = _interopRequireDefault(_pick2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constants = __webpack_require__(1);

var _reducers = __webpack_require__(47);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var START = _constants.actionTypes.START,
    SET = _constants.actionTypes.SET,
    SET_PROFILE = _constants.actionTypes.SET_PROFILE,
    MERGE = _constants.actionTypes.MERGE,
    LOGIN = _constants.actionTypes.LOGIN,
    LOGOUT = _constants.actionTypes.LOGOUT,
    LOGIN_ERROR = _constants.actionTypes.LOGIN_ERROR,
    CLEAR_ERRORS = _constants.actionTypes.CLEAR_ERRORS,
    REMOVE = _constants.actionTypes.REMOVE,
    NO_VALUE = _constants.actionTypes.NO_VALUE,
    SET_LISTENER = _constants.actionTypes.SET_LISTENER,
    UNSET_LISTENER = _constants.actionTypes.UNSET_LISTENER,
    AUTHENTICATION_INIT_STARTED = _constants.actionTypes.AUTHENTICATION_INIT_STARTED,
    AUTHENTICATION_INIT_FINISHED = _constants.actionTypes.AUTHENTICATION_INIT_FINISHED,
    AUTH_EMPTY_CHANGE = _constants.actionTypes.AUTH_EMPTY_CHANGE,
    AUTH_LINK_SUCCESS = _constants.actionTypes.AUTH_LINK_SUCCESS,
    UNAUTHORIZED_ERROR = _constants.actionTypes.UNAUTHORIZED_ERROR,
    AUTH_UPDATE_SUCCESS = _constants.actionTypes.AUTH_UPDATE_SUCCESS,
    AUTH_RELOAD_SUCCESS = _constants.actionTypes.AUTH_RELOAD_SUCCESS,
    PROFILE_UPDATE_SUCCESS = _constants.actionTypes.PROFILE_UPDATE_SUCCESS;
var isInitializingReducer = exports.isInitializingReducer = function isInitializingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments[1];

  switch (action.type) {
    case AUTHENTICATION_INIT_STARTED:
      return true;
    case AUTHENTICATION_INIT_FINISHED:
      return false;
    default:
      return state;
  }
};

var requestingReducer = exports.requestingReducer = function requestingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref = arguments[1];
  var type = _ref.type,
      path = _ref.path;

  switch (type) {
    case START:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), true));
    case NO_VALUE:
    case SET:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), false));
    default:
      return state;
  }
};

var requestedReducer = exports.requestedReducer = function requestedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref2 = arguments[1];
  var type = _ref2.type,
      path = _ref2.path;

  switch (type) {
    case START:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), false));
    case NO_VALUE:
    case SET:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), true));
    default:
      return state;
  }
};

var timestampsReducer = exports.timestampsReducer = function timestampsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref3 = arguments[1];
  var type = _ref3.type,
      path = _ref3.path;

  switch (type) {
    case START:
    case NO_VALUE:
    case SET:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), Date.now()));
    default:
      return state;
  }
};

var createDataReducer = function createDataReducer() {
  var actionKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data';
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    switch (action.type) {
      case SET:
        return (0, _setWith3.default)(Object, (0, _reducers.getDotStrPath)(action.path), action[actionKey], state);
      case MERGE:
        var previousData = (0, _get3.default)(state, (0, _reducers.getDotStrPath)(action.path), {});
        var mergedData = (0, _assign3.default)(previousData, action[actionKey]);
        return (0, _setWith3.default)(Object, (0, _reducers.getDotStrPath)(action.path), mergedData, state);
      case NO_VALUE:
        return (0, _setWith3.default)(Object, (0, _reducers.getDotStrPath)(action.path), null, state);
      case REMOVE:
        if (actionKey === 'data') {
          return (0, _reducers.recursiveUnset)((0, _reducers.getDotStrPath)(action.path), state);
        }
        return state;
      case LOGOUT:
        if (action.preserve) {
          if ((0, _isArray3.default)(action.preserve)) {
            return (0, _pick3.default)(state, action.preserve);
          } else if ((0, _isObject3.default)(action.preserve)) {
            return action.preserve[actionKey] ? (0, _reducers.preserveValuesFromState)(state, action.preserve[actionKey], {}) : {};
          }
          throw new Error('Invalid preserve parameter. It must be an Object or an Array');
        }
        return {};
      default:
        return state;
    }
  };
};

var authReducer = exports.authReducer = function authReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { isLoaded: false, isEmpty: true };
  var action = arguments[1];

  switch (action.type) {
    case LOGIN:
    case AUTH_UPDATE_SUCCESS:
      if (!action.auth) {
        return {
          isEmpty: true,
          isLoaded: true
        };
      }
      var auth = action.auth.toJSON ? action.auth.toJSON() : action.auth;

      if (action.preserve && action.preserve.auth) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.auth, _extends({}, auth, {
          isEmpty: false,
          isLoaded: true
        }));
      }
      return _extends({}, auth, { isEmpty: false, isLoaded: true });
    case AUTH_LINK_SUCCESS:
    case AUTH_RELOAD_SUCCESS:
      if (!action.payload) {
        return {
          isEmpty: true,
          isLoaded: true
        };
      }
      return _extends({}, action.payload.toJSON ? action.payload.toJSON() : action.payload, {
        isEmpty: false,
        isLoaded: true
      });
    case LOGIN_ERROR:
    case AUTH_EMPTY_CHANGE:
    case LOGOUT:
      if (action.preserve && action.preserve.auth) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.auth, {
          isLoaded: true,
          isEmpty: true
        });
      }
      return { isLoaded: true, isEmpty: true };
    default:
      return state;
  }
};

var authErrorReducer = exports.authErrorReducer = function authErrorReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var action = arguments[1];

  switch (action.type) {
    case LOGIN:
    case LOGOUT:
      return null;
    case LOGIN_ERROR:
    case UNAUTHORIZED_ERROR:
      return action.authError;
    default:
      return state;
  }
};

var profileReducer = exports.profileReducer = function profileReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { isLoaded: false, isEmpty: true };
  var action = arguments[1];

  switch (action.type) {
    case SET_PROFILE:
      if (!action.profile) {
        return _extends({}, state, {
          isEmpty: true,
          isLoaded: true
        });
      }
      return _extends({}, action.profile, {
        isEmpty: false,
        isLoaded: true
      });
    case PROFILE_UPDATE_SUCCESS:
      return _extends({}, state, action.payload);
    case LOGIN:
      if (action.preserve && action.preserve.profile) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.profile, {
          isLoaded: true,
          isEmpty: true
        });
      }
      return {
        isEmpty: true,
        isLoaded: false
      };
    case LOGOUT:
    case AUTH_EMPTY_CHANGE:
      if (action.preserve && action.preserve.profile) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.profile, {
          isLoaded: true,
          isEmpty: true
        });
      }
      return { isLoaded: true, isEmpty: true };
    default:
      return state;
  }
};

var errorsReducer = exports.errorsReducer = function errorsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case LOGIN_ERROR:
    case UNAUTHORIZED_ERROR:
      if (!(0, _isArray3.default)(state)) {
        throw new Error('Errors state must be an array');
      }
      return [].concat(_toConsumableArray(state), [action.authError]);
    case LOGOUT:
    case CLEAR_ERRORS:
      if (action.preserve && action.preserve.errors) {
        if (typeof action.preserve.errors !== 'function') {
          throw new Error('Preserve for the errors state currently only supports functions');
        }
        return state.filter(action.preserve.errors);
      }
      return [];
    default:
      return state;
  }
};

var listenersById = function listenersById() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref4 = arguments[1];
  var type = _ref4.type,
      path = _ref4.path,
      payload = _ref4.payload;

  switch (type) {
    case SET_LISTENER:
      return _extends({}, state, _defineProperty({}, payload.id, {
        id: payload.id,
        path: path
      }));
    case UNSET_LISTENER:
      return (0, _omit3.default)(state, [payload.id]);
    default:
      return state;
  }
};

var allListeners = function allListeners() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _ref5 = arguments[1];
  var type = _ref5.type,
      path = _ref5.path,
      payload = _ref5.payload;

  switch (type) {
    case SET_LISTENER:
      return [].concat(_toConsumableArray(state), [payload.id]);
    case UNSET_LISTENER:
      return state.filter(function (lId) {
        return lId !== payload.id;
      });
    default:
      return state;
  }
};

var listenersReducer = exports.listenersReducer = (0, _reducers.combineReducers)({
  byId: listenersById,
  allIds: allListeners
});

var dataReducer = exports.dataReducer = createDataReducer();

var orderedReducer = exports.orderedReducer = createDataReducer('ordered');

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(48),
    func = convert('assign', __webpack_require__(194));

func.placeholder = __webpack_require__(21);
module.exports = func;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(33),
    copyObject = __webpack_require__(19),
    createAssigner = __webpack_require__(84),
    isArrayLike = __webpack_require__(38),
    isPrototype = __webpack_require__(78),
    keys = __webpack_require__(40);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(48),
    func = convert('setWith', __webpack_require__(196));

func.placeholder = __webpack_require__(21);
module.exports = func;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var baseSet = __webpack_require__(32);

/**
 * This method is like `_.set` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.setWith(object, '[0][1]', 'a', Object);
 * // => { '0': { '1': 'a' } }
 */
function setWith(object, path, value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseSet(object, path, value, customizer);
}

module.exports = setWith;


/***/ })
/******/ ]);
});