{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('./parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('./input control');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\n\nvar ReactInput = (_temp2 = _class = function (_React$Component) {\n  _inherits(ReactInput, _React$Component);\n\n  function ReactInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ReactInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInput.__proto__ || Object.getPrototypeOf(ReactInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInstance = function (instance) {\n      _this.input = instance;\n    }, _this.getInputElement = function () {\n      return _this.input;\n    }, _this.onChange = function (event) {\n      var _this$props = _this.props,\n          parse = _this$props.parse,\n          format = _this$props.format;\n      return (0, _inputControl.onChange)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onPaste = function (event) {\n      var _this$props2 = _this.props,\n          parse = _this$props2.parse,\n          format = _this$props2.format;\n      return (0, _inputControl.onPaste)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onCut = function (event) {\n      var _this$props3 = _this.props,\n          parse = _this$props3.parse,\n          format = _this$props3.format;\n      return (0, _inputControl.onCut)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onBlur = function (event) {\n      var _this$props4 = _this.props,\n          parse = _this$props4.parse,\n          onBlur = _this$props4.onBlur; // This `onBlur` interceptor is a workaround for `redux-form`,\n      // so that it gets the right (parsed, not the formatted one)\n      // `event.target.value` in its `onBlur` handler.\n\n      if (onBlur) {\n        var _event = _extends({}, event, {\n          target: _extends({}, event.target, {\n            value: (0, _parse3.default)(_this.getInputElement().value, undefined, parse).value\n          }) // For `redux-form` event detection.\n          // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n        });\n\n        _event.stopPropagation = event.stopPropagation;\n        _event.preventDefault = event.preventDefault;\n        onBlur(_event);\n      }\n    }, _this.onKeyDown = function (event) {\n      var _this$props5 = _this.props,\n          parse = _this$props5.parse,\n          format = _this$props5.format;\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event);\n      }\n\n      return (0, _inputControl.onKeyDown)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ReactInput, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          value = _props.value,\n          parse = _props.parse,\n          format = _props.format,\n          inputComponent = _props.inputComponent,\n          rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']); // Non-string `inputComponent`s would work in this case\n      // but it would also introduce a caret reset bug:\n      // the caret position would reset on each input.\n      // The origins of this bug are unknown, they may be\n      // somehow related to the `ref` property\n      // being intercepted by React here.\n\n\n      return _react2.default.createElement(inputComponent, _extends({}, rest, {\n        ref: this.storeInstance,\n        value: format(isEmpty(value) ? '' : value).text,\n        onKeyDown: this.onKeyDown,\n        onChange: this.onChange,\n        onPaste: this.onPaste,\n        onCut: this.onCut,\n        onBlur: this.onBlur\n      }));\n    }\n    /**\r\n     * Returns `<input/>` DOM Element.\r\n     * @return {DOMElement}\r\n     */\n    // This handler is a workaround for `redux-form`.\n\n  }, {\n    key: 'focus',\n\n    /**\r\n     * Focuses the `<input/>`.\r\n     * Can be called manually.\r\n     */\n    value: function focus() {\n      this.getInputElement().focus();\n    }\n  }]);\n\n  return ReactInput;\n}(_react2.default.Component), _class.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: _propTypes2.default.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: _propTypes2.default.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: _propTypes2.default.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: _propTypes2.default.string.isRequired,\n  // Is parsed from <input/> text.\n  value: _propTypes2.default.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: _propTypes2.default.func.isRequired,\n  // This `onBlur` interceptor is a workaround for `redux-form`,\n  // so that it gets the parsed `value` in its `onBlur` handler,\n  // not the formatted text.\n  onBlur: _propTypes2.default.func,\n  // Passthrough\n  onKeyDown: _propTypes2.default.func\n}, _class.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n}, _temp2);\nexports.default = ReactInput;\n\nfunction isEmpty(value) {\n  return value === undefined || value === null;\n}","map":null,"metadata":{},"sourceType":"script"}