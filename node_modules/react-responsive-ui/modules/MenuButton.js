'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// For some weird reason, in Chrome, `setTimeout()` would lag up to a second (or more) behind.
// Turns out, Chrome developers have deprecated `setTimeout()` API entirely without asking anyone.
// Replacing `setTimeout()` with `requestAnimationFrame()` can work around that Chrome bug.
// https://github.com/bvaughn/react-virtualized/issues/722


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _requestAnimationFrameTimeout = require('request-animation-frame-timeout');

var _PageAndMenu = require('./PageAndMenu');

var _MenuIcon = require('./MenuIcon');

var _MenuIcon2 = _interopRequireDefault(_MenuIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContextAwareMenuButton = function ContextAwareMenuButton(props) {
	return _react2.default.createElement(
		_PageAndMenu.Context.Consumer,
		null,
		function (context) {
			return _react2.default.createElement(MenuButton, _extends({}, props, {
				registerMenuButton: context.registerMenuButton,
				toggleMenu: context.toggleMenu,
				menuIsExpanded: context.menuIsExpanded }));
		}
	);
};

exports.default = ContextAwareMenuButton;
var MenuButton = (_temp2 = _class = function (_React$PureComponent) {
	_inherits(MenuButton, _React$PureComponent);

	function MenuButton() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, MenuButton);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MenuButton.__proto__ || Object.getPrototypeOf(MenuButton)).call.apply(_ref, [this].concat(args))), _this), _this.onClick = function (event) {
			event.preventDefault();
			var toggleMenu = _this.props.toggleMenu;
			// A workaround for Safari (both macOS and iOS) bug: `<button/>`s not getting focus.
			// https://stackoverflow.com/questions/20359962/jquery-mobile-focusout-event-for-relatedtarget-returns-incorrect-result-in-safar

			if (!_this.cooldown) {
				toggleMenu();
			}
		}, _this.setCooldown = function () {
			// A workaround for Safari (both macOS and iOS) bug: `<button/>`s not getting focus.
			// https://stackoverflow.com/questions/20359962/jquery-mobile-focusout-event-for-relatedtarget-returns-incorrect-result-in-safar
			// Sets a small "cooldown" on hide on focus out.
			_this.cooldown = true;
			_this.cooldownTimer = (0, _requestAnimationFrameTimeout.setTimeout)(function () {
				return _this.cooldown = false;
			}, 30);
		}, _this.storeButtonNode = function (node) {
			return _this.button = node;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(MenuButton, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this2 = this;

			var registerMenuButton = this.props.registerMenuButton;

			this.unregister = registerMenuButton({
				element: function element() {
					return _this2.button;
				},
				setCooldown: this.setCooldown
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.unregister();
			(0, _requestAnimationFrameTimeout.clearTimeout)(this.cooldownTimer);
		}
	}, {
		key: 'getChildren',
		value: function getChildren() {
			var _props = this.props,
			    menuIsExpanded = _props.menuIsExpanded,
			    children = _props.children,
			    icon = _props.icon;


			if (children) {
				if (typeof children === 'function') {
					return children({ expanded: menuIsExpanded });
				}
				return children;
			}

			return _react2.default.createElement(icon || _MenuIcon2.default, { expanded: menuIsExpanded });
		}
	}, {
		key: 'getButtonProps',
		value: function getButtonProps() {
			var menuIsExpanded = this.props.menuIsExpanded;

			return {
				ref: this.storeButtonNode,
				onClick: this.onClick,
				// 'aria-label': 'Menu',
				// 'aria-haspopup': 'menu',
				// `menuIsExpanded` property can be `undefined` to differentiate
				// between "has been toggled yet"/"has not been toggled yet"
				// to workaround the CSS animation bug.
				'aria-expanded': menuIsExpanded ? true : false
			};
		}
	}, {
		key: 'render',
		value: function render() {
			var _props2 = this.props,
			    link = _props2.link,
			    className = _props2.className,
			    component = _props2.component,
			    MenuButtonIcon = _props2.icon,
			    children = _props2.children,
			    menuIsExpanded = _props2.menuIsExpanded,
			    toggleMenu = _props2.toggleMenu,
			    registerMenuButton = _props2.registerMenuButton,
			    rest = _objectWithoutProperties(_props2, ['link', 'className', 'component', 'icon', 'children', 'menuIsExpanded', 'toggleMenu', 'registerMenuButton']);

			var properties = _extends({}, rest, this.getButtonProps());

			if (component) {
				return _react2.default.createElement(component, properties);
			}

			properties.className = (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', className, {
				// Only when using an `icon` component.
				'rrui__menu-button': !component && !children
			});

			// A link.
			if (link) {
				return _react2.default.createElement('a', _extends({}, properties, {
					href: link
				}), this.getChildren());
			}

			// A button.
			return _react2.default.createElement('button', _extends({}, properties, {
				type: 'button'
			}), this.getChildren());
		}
	}]);

	return MenuButton;
}(_react2.default.PureComponent), _class.propTypes = {
	// Context.
	registerMenuButton: _propTypes2.default.func.isRequired,
	toggleMenu: _propTypes2.default.func.isRequired,
	menuIsExpanded: _propTypes2.default.bool, //.isRequired,

	// A URL of the "Menu" page:
	// if a web browser has javascript disabled (e.g. Tor),
	// then the menu button will redirect to this Menu page URL.
	// If not set then won't redirect anywhere.
	link: _propTypes2.default.string,

	// HTML `title` attribute.
	title: _propTypes2.default.string,

	// Menu button component.
	component: _propTypes2.default.elementType,

	// Menu button icon component.
	icon: _propTypes2.default.func,

	// CSS class.
	className: _propTypes2.default.string,

	// CSS style object.
	style: _propTypes2.default.object,

	children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func])
}, _temp2);
//# sourceMappingURL=MenuButton.js.map