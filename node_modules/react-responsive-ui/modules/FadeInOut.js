'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

// For some weird reason, in Chrome, `setTimeout()` would lag up to a second (or more) behind.
// Turns out, Chrome developers have deprecated `setTimeout()` API entirely without asking anyone.
// Replacing `setTimeout()` with `requestAnimationFrame()` can work around that Chrome bug.
// https://github.com/bvaughn/react-virtualized/issues/722


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _requestAnimationFrameTimeout = require('request-animation-frame-timeout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FadeInOut = (_temp = _class = function (_React$Component) {
	_inherits(FadeInOut, _React$Component);

	function FadeInOut(props) {
		_classCallCheck(this, FadeInOut);

		var _this = _possibleConstructorReturn(this, (FadeInOut.__proto__ || Object.getPrototypeOf(FadeInOut)).call(this, props));

		_this.state = {
			show: _this.props.show
		};

		_this.hide = function () {
			var fadeOutDuration = _this.props.fadeOutDuration;


			(0, _requestAnimationFrameTimeout.clearTimeout)(_this.showTimer);

			if (!_this._isMounted) {
				return;
			}

			_this.setState({
				show: false,
				fadeIn: false,
				fadeOut: true
			});

			// Gives some time to CSS opacity transition to finish.
			_this.hideTimer = (0, _requestAnimationFrameTimeout.setTimeout)(function () {
				if (_this._isMounted) {
					_this.setState({
						fadeOut: false
					});
				}
			}, fadeOutDuration);
		};

		if (typeof props.children === 'string' || _react2.default.Children.count(props.children) !== 1) {
			throw new Error('`<FadeInOut/>` expect an element as a child.');
		}
		return _this;
	}

	_createClass(FadeInOut, [{
		key: 'componentDidUpdate',
		value: function componentDidUpdate(prevProps) {
			if (!prevProps.show && this.props.show) {
				this.show();
			} else if (prevProps.show && !this.props.show) {
				this.hide();
			}
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _props = this.props,
			    show = _props.show,
			    fadeInInitially = _props.fadeInInitially;


			this._isMounted = true;

			if (show && fadeInInitially) {
				this.show();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this._isMounted = false;

			(0, _requestAnimationFrameTimeout.clearTimeout)(this.showTimer);
			(0, _requestAnimationFrameTimeout.clearTimeout)(this.hideTimer);
		}
	}, {
		key: 'show',
		value: function show() {
			var _this2 = this;

			(0, _requestAnimationFrameTimeout.clearTimeout)(this.showTimer);
			(0, _requestAnimationFrameTimeout.clearTimeout)(this.hideTimer);

			this.setState({
				show: true,
				fadeIn: false,
				fadeOut: false
			});

			this.showTimer = (0, _requestAnimationFrameTimeout.setTimeout)(function () {
				if (_this2._isMounted) {
					_this2.setState({
						fadeIn: true
					});
				}
			},
			// Adding a non-null delay in order to
			// prevent web browser from optimizing
			// adding CSS classes and doing it simultaneously
			// rather than sequentially (required for CSS transition).
			30);
		}
	}, {
		key: 'getFadeInStyle',
		value: function getFadeInStyle() {
			var fadeInDuration = this.props.fadeInDuration;

			return {
				opacity: 1,
				transition: 'opacity ' + fadeInDuration + 'ms ease-out'
			};
		}
	}, {
		key: 'getFadeOutStyle',
		value: function getFadeOutStyle() {
			var fadeOutDuration = this.props.fadeOutDuration;

			return {
				opacity: 0,
				transition: 'opacity ' + fadeOutDuration + 'ms ease-out'
			};
		}
	}, {
		key: 'getStyle',
		value: function getStyle() {
			var _props2 = this.props,
			    show = _props2.show,
			    fadeInInitially = _props2.fadeInInitially;
			var _state = this.state,
			    fadeIn = _state.fadeIn,
			    fadeOut = _state.fadeOut;


			if (fadeIn) {
				return this.getFadeInStyle();
			}

			if (fadeOut) {
				return this.getFadeOutStyle();
			}

			// On first render.
			// If `show={true}` and hasn't faded in/out yet, then just show.
			if (show && fadeIn === undefined && !fadeInInitially) {
				return SHOWN_STYLE;
			}

			return HIDDEN_STYLE;
		}
	}, {
		key: 'render',
		value: function render() {
			var _props3 = this.props,
			    fadeInClassName = _props3.fadeInClassName,
			    style = _props3.style,
			    children = _props3.children;
			var _state2 = this.state,
			    show = _state2.show,
			    fadeIn = _state2.fadeIn,
			    fadeOut = _state2.fadeOut;


			if (show || fadeOut) {
				var _style = children.props.style ? _extends({}, children.props.style, this.getStyle()) : this.getStyle();

				if (fadeInClassName) {
					return _react2.default.cloneElement(children, {
						// Set `opacity` correctly on first render
						// if `fadeInInitially` is not `true`.
						style: fadeIn === undefined ? _style : undefined,
						className: (0, _classnames2.default)(children.props.className, _defineProperty({}, fadeInClassName, fadeIn))
					});
				} else {
					return _react2.default.cloneElement(children, {
						style: _style
					});
				}
				// return children
			}

			return null;
		}
	}]);

	return FadeInOut;
}(_react2.default.Component), _class.propTypes = {
	show: _propTypes2.default.bool.isRequired,
	fadeInInitially: _propTypes2.default.bool.isRequired,
	fadeInDuration: _propTypes2.default.number,
	fadeOutDuration: _propTypes2.default.number,
	fadeInClassName: _propTypes2.default.string,
	children: _propTypes2.default.element.isRequired
}, _class.defaultProps = {
	show: false,
	fadeInInitially: false,
	fadeInDuration: 0,
	fadeOutDuration: 0
}, _temp);
exports.default = FadeInOut;


var SHOWN_STYLE = {
	opacity: 1
};

var HIDDEN_STYLE = {
	opacity: 0
};
//# sourceMappingURL=FadeInOut.js.map