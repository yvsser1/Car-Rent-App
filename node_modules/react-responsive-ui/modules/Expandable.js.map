{"version":3,"sources":["../source/Expandable.js"],"names":["PureComponent","Component","Expandable","state","expanded","onFocusOutRef","isExpanded","expand","parameters","toggle","collapse","props","onExpand","onExpanded","onCollapse","onCollapsed","isExpandedState","process","undefined","refreshingExpanded","refresh","Promise","resolve","cancelProcess","cancelled","reset","processPhase","nextPhase","phase","endProcess","phaseCancellers","onCancelPhase","handler","expandTimeout","scrollIntoViewTimer","preload","then","setState","shouldRender","current","listenToTouches","scrollIntoView","waitUnForExpandAnimationTimer","stopListeningToTouches","focusOut","waitForUnExpandAnimation","expandAnimationDuration","onKeyDown","event","defaultPrevented","ctrlKey","altKey","shiftKey","metaKey","keyCode","preventDefault","storeContainerNode","node","container","getContainerNode","onBlur","onFocusOut","onPreloadStateChange","isPreloading","error","console","shouldScrollIntoView","scrollIntoViewDelay","scrollMode","behavior","block","inline","Math","max","animation","alignment","upward","getTogglerNode","closeLabel","CloseButtonIcon","closeButtonIcon","role","style","className","children","element","Children","map","child","cloneElement","propTypes","oneOf","func","onPreloadError","bool","string","object","isRequired","number","oneOfType","defaultProps"],"mappings":"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","file":"Expandable.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport scrollIntoView from 'scroll-into-view-if-needed'\r\nimport createRef from 'react-create-ref'\r\n\r\n// For some weird reason, in Chrome, `setTimeout()` would lag up to a second (or more) behind.\r\n// Turns out, Chrome developers have deprecated `setTimeout()` API entirely without asking anyone.\r\n// Replacing `setTimeout()` with `requestAnimationFrame()` can work around that Chrome bug.\r\n// https://github.com/bvaughn/react-virtualized/issues/722\r\nimport { setTimeout, clearTimeout } from 'request-animation-frame-timeout'\r\n\r\nimport Close, { CloseIcon } from './Close'\r\nimport OnFocusOutOrTapOutside from './OnFocusOutOrTapOutside'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n/**\r\n * Usage:\r\n *\r\n * <button onClick={() => this.expandable.toggle()}>\r\n *   Toggle\r\n * </button>\r\n *\r\n * <Expandable ref={ref => this.expandable = ref}>\r\n *   ...\r\n * </Expandable>\r\n *\r\n * Methods:\r\n * * `.toggle()`\r\n * * `.expand()`\r\n * * `.collapse()`\r\n * * `.isExpanded()`\r\n */\r\nexport default class Expandable extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// The default animation could be called \"expand\".\r\n\t\tanimation: PropTypes.oneOf(['fade-up']),\r\n\r\n\t\t// Can optionally preload `<Expandable/>` contents before expanding it.\r\n\t\t// Must return a `Promise`.\r\n\t\tpreload : PropTypes.func,\r\n\t\tonPreloadStateChange : PropTypes.func,\r\n\t\tonPreloadError : PropTypes.func,\r\n\r\n\t\tonExpand : PropTypes.func,\r\n\t\tonCollapse : PropTypes.func,\r\n\r\n\t\t// Whether the `<Expandable/>` expands upwards or downwards.\r\n\t\talignment : PropTypes.oneOf(['left', 'right']),\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then the dropdown expands itself upward.\r\n\t\t// (as opposed to the default downward)\r\n\t\tupward : PropTypes.bool,\r\n\r\n\t\t// ARIA `role` (accessibility).\r\n\t\trole : PropTypes.string,\r\n\r\n\t\t// CSS style object.\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t// CSS class.\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t// When the `<Expandable/>` is expanded\r\n\t\t// its content may not fit on the screen.\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then the browser will automatically scroll\r\n\t\t// so that the expanded content fits on the screen.\r\n\t\tscrollIntoView : PropTypes.bool.isRequired,\r\n\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then these two are gonna define the delay after which it scrolls into view.\r\n\t\texpandAnimationDuration : PropTypes.number.isRequired,\r\n\r\n\t\tscrollIntoViewDelay : PropTypes.number.isRequired,\r\n\r\n\t\tgetTogglerNode : PropTypes.func,\r\n\t\tonFocusOut : PropTypes.func,\r\n\r\n\t\t// `aria-label` for the \"Close\" button\r\n\t\t// (which is an \"x\" visible in fullscreen mode).\r\n\t\tcloseLabel : PropTypes.string,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([false])]).isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tscrollIntoView : true,\r\n\t\texpandAnimationDuration : 150,\r\n\t\tscrollIntoViewDelay : 0,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : CloseIcon\r\n\t}\r\n\r\n\tstate = {\r\n\t\t// This initialization is required for `if (expand === expanded)`.\r\n\t\texpanded: false\r\n\t}\r\n\r\n\tonFocusOutRef = createRef()\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tif (this.cancelProcess) {\r\n\t\t\tthis.cancelProcess()\r\n\t\t}\r\n\t}\r\n\r\n\tisExpanded = () => this.state.expanded\r\n\r\n\texpand   = (parameters) => this.toggle(true, parameters)\r\n\tcollapse = () => this.toggle(false)\r\n\r\n\ttoggle = (expand, parameters = {}) =>\r\n\t{\r\n\t\tconst {\r\n\t\t\tonExpand,\r\n\t\t\tonExpanded,\r\n\t\t\tonCollapse,\r\n\t\t\tonCollapsed\r\n\t\t} = this.props\r\n\r\n\t\tconst { expanded } = this.state\r\n\r\n\t\t// If no `expand` argument provided then just toggle.\r\n\t\tconst isExpandedState = (expanded && this.process !== 'unexpand') ||\r\n\t\t\t(this.process === 'expand')\r\n\t\tif (expand === undefined) {\r\n\t\t\texpand = !isExpandedState\r\n\t\t}\r\n\r\n\t\t// Don't collapse if already collapsed.\r\n\t\t// Don't expand if already expanded\r\n\t\t// unless manually forcing a refresh of content.\r\n\r\n\t\tlet refreshingExpanded\r\n\t\tif (expand && isExpandedState && parameters.refresh) {\r\n\t\t\trefreshingExpanded = true\r\n\t\t}\r\n\r\n\t\tif (expand === isExpandedState && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\t// if (this.isToggling && !refreshingExpanded) {\r\n\t\t// \treturn Promise.resolve()\r\n\t\t// }\r\n\r\n\t\tif (this.cancelProcess) {\r\n\t\t\tthis.cancelProcess()\r\n\t\t}\r\n\r\n\t\tlet cancelled\r\n\r\n\t\tconst reset = () => {\r\n\t\t\tthis.process = undefined\r\n\t\t\tthis.processPhase = undefined\r\n\t\t\tthis.cancelProcess = undefined\r\n\t\t}\r\n\r\n\t\tconst nextPhase = (phase) => {\r\n\t\t\tif (!cancelled) {\r\n\t\t\t\tthis.processPhase = phase\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction endProcess() {\r\n\t\t\tnextPhase()\r\n\t\t\treset()\r\n\t\t}\r\n\r\n\t\tconst phaseCancellers = {}\r\n\t\tfunction onCancelPhase(phase, handler) {\r\n\t\t\tphaseCancellers[phase] = handler\r\n\t\t}\r\n\r\n\t\tthis.cancelProcess = () => {\r\n\t\t\tif (phaseCancellers[this.processPhase]) {\r\n\t\t\t\tphaseCancellers[this.processPhase]()\r\n\t\t\t}\r\n\t\t\tcancelled = true\r\n\t\t\treset()\r\n\t\t}\r\n\r\n\t\tif (expand) {\r\n\t\t\t// Expand.\r\n\t\t\tthis.process = 'expand'\r\n\t\t\tonCancelPhase('scheduleExpand', () => clearTimeout(this.expandTimeout))\r\n\t\t\tonCancelPhase('expanded', () => clearTimeout(this.scrollIntoViewTimer))\r\n\t\t\tnextPhase('preload')\r\n\t\t\treturn this.preload().then(() => new Promise((resolve) => {\r\n\t\t\t\tif (!nextPhase('render')) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshouldRender: true\r\n\t\t\t\t},\r\n\t\t\t\t// Without an artificial delay for some reason the CSS \"expand\" animation won't play.\r\n\t\t\t\t// Perhaps a browser decides to optimize two subsequent renders\r\n\t\t\t\t// and doesn't render \"pre-expanded\" and \"expanded\" states separately.\r\n\t\t\t\t// Even with a 0ms delay it would randomly play/not-play the expand animation.\r\n\t\t\t\t() => {\r\n\t\t\t\t\tif (!nextPhase('scheduleExpand')) {\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (onExpand) {\r\n\t\t\t\t\t\tonExpand()\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Using `requestAnimationFrame()` instead of `setTimeout()`\r\n\t\t\t\t\t// because otherwise there would be a weird and strange delay.\r\n\t\t\t\t\tthis.expandTimeout = setTimeout(() => {\r\n\t\t\t\t\t\tif (!nextPhase('expand')) {\r\n\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.expandTimeout = undefined\r\n\t\t\t\t\t\tthis.setState({ expanded: true }, () => {\r\n\t\t\t\t\t\t\tif (!nextPhase('expanded')) {\r\n\t\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (onExpanded) {\r\n\t\t\t\t\t\t\t\tonExpanded()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.onFocusOutRef.current) {\r\n\t\t\t\t\t\t\t\tthis.onFocusOutRef.current.listenToTouches()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.scrollIntoView().then(endProcess)\r\n\t\t\t\t\t\t\t// `resolve()` doesn't wait for `scrollIntoView`\r\n\t\t\t\t\t\t\t// because other components use it like `.toggle().then(focus)`\r\n\t\t\t\t\t\t\t// where it shouldn't wait for the final phases like \"scroll into view\".\r\n\t\t\t\t\t\t\tresolve()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}, 0)\r\n\t\t\t\t})\r\n\t\t\t}))\r\n\t\t} else {\r\n\t\t\t// Un-Expand.\r\n\t\t\tthis.process = 'unexpand'\r\n\t\t\tonCancelPhase('unexpand', () => clearTimeout(this.scrollIntoViewTimer))\r\n\t\t\tonCancelPhase('unexpanded', () => clearTimeout(this.waitUnForExpandAnimationTimer))\r\n\t\t\tnextPhase('unexpand')\r\n\t\t\tif (this.onFocusOutRef.current) {\r\n\t\t\t\tthis.onFocusOutRef.current.stopListeningToTouches()\r\n\t\t\t}\r\n\t\t\tif (onCollapse) {\r\n\t\t\t\tonCollapse({ focusOut: this.focusOut })\r\n\t\t\t}\r\n\t\t\t// Set `expanded` to `false` to play the collapse CSS animation.\r\n\t\t\t// Once that animation is finished remove\r\n\t\t\t// the contents of the `<Expanded/>` from DOM.\r\n\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\tthis.setState({ expanded: false }, () => {\r\n\t\t\t\t\tif (!nextPhase('unexpanded')) {\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (onCollapsed) {\r\n\t\t\t\t\t\tonCollapsed()\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst waitForUnExpandAnimation = () => {\r\n\t\t\t\t\t\tconst { expandAnimationDuration } = this.props\r\n\t\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\t\tthis.waitUnForExpandAnimationTimer = setTimeout(resolve, expandAnimationDuration * 1.1)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\twaitForUnExpandAnimation().then(() => {\r\n\t\t\t\t\t\tif (!nextPhase('unrender')) {\r\n\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.setState({ shouldRender: false }, endProcess)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t// `resolve()` doesn't wait for `removeFromDOMAfterCollapsed`\r\n\t\t\t\t\t// because other components use it like `.toggle().then(focus)`\r\n\t\t\t\t\t// where it shouldn't wait for the final phases like \"scroll into view\".\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// Preload `<Expanded/>` content (if required).\r\n\tpreload()\r\n\t{\r\n\t\tconst { preload, onPreloadStateChange } = this.props\r\n\r\n\t\tif (preload) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisPreloading: true\r\n\t\t\t})\r\n\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\tonPreloadStateChange(true)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (preload ? preload() : Promise.resolve())\r\n\t\t\t.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading: false\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\t// if (onPreloadError) {\r\n\t\t\t\t// \tonPreloadError(error)\r\n\t\t\t\t// }\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading: false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\tscrollIntoView() {\r\n\t\tconst {\r\n\t\t\tscrollIntoView: shouldScrollIntoView,\r\n\t\t\tscrollIntoViewDelay,\r\n\t\t\texpandAnimationDuration\r\n\t\t} = this.props\r\n\t\tif (!shouldScrollIntoView) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.scrollIntoViewTimer = setTimeout(() => {\r\n\t\t\t\t// https://github.com/stipsan/scroll-into-view-if-needed/issues/359\r\n\t\t\t\t// scrollIntoView(this.container, false, { duration: 300 })\r\n\t\t\t\tscrollIntoView(this.container, {\r\n\t\t\t\t\tscrollMode: 'if-needed',\r\n\t\t\t\t\tbehavior: 'smooth',\r\n\t\t\t\t\tblock: 'nearest',\r\n\t\t\t\t\tinline: 'nearest'\r\n\t\t\t\t})\r\n\t\t\t\tresolve()\r\n\t\t\t}, Math.max(scrollIntoViewDelay, expandAnimationDuration) * 1.1)\r\n\t\t})\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// Collapse on \"Escape\".\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\t// Collapse the list if it's expanded\r\n\t\t\t\treturn this.collapse()\r\n\t\t}\r\n\t}\r\n\r\n\tstoreContainerNode = (node) => this.container = node\r\n\tgetContainerNode = () => this.container\r\n\r\n\t// This function is called from outside in `<ExpandableList/>`.\r\n\tonBlur = (event) => {\r\n\t\treturn this.onFocusOutRef.current && this.onFocusOutRef.current.onBlur(event)\r\n\t}\r\n\r\n\tonFocusOut = (event) => {\r\n\t\tconst { onFocusOut } = this.props\r\n\t\tthis.focusOut = true\r\n\t\tonFocusOut(event)\r\n\t\tthis.focusOut = undefined\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tanimation,\r\n\t\t\talignment,\r\n\t\t\tupward,\r\n\t\t\tonFocusOut,\r\n\t\t\tgetTogglerNode,\r\n\t\t\tcloseLabel,\r\n\t\t\tcloseButtonIcon : CloseButtonIcon,\r\n\t\t\trole,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tshouldRender,\r\n\t\t\texpanded\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tif (!shouldRender) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\t// `tabIndex={ -1 }` makes the `<div/>` focusable.\r\n\t\t// So that `<Expandable/>` doesn't collapse on click inside it (top, bottom).\r\n\r\n\t\t// `aria-hidden={true/false}` is not set automatically here\r\n\t\t// because when `<Expandable/>` is collapsed then it's not rendered.\r\n\r\n\t\t// tabIndex={ -1 }\r\n\r\n\t\tlet element = (\r\n\t\t\t<div\r\n\t\t\t\tref={ this.storeContainerNode }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\trole={ role }\r\n\t\t\t\taria-hidden={ this.props['aria-hidden'] }\r\n\t\t\t\taria-label={ this.props['aria-label'] }\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\t'rrui__shadow',\r\n\t\t\t\t\t'rrui__expandable',\r\n\t\t\t\t\t'rrui__expandable--overlay',\r\n\t\t\t\t\tanimation && `rrui__expandable--${animation}`,\r\n\t\t\t\t\tanimation && expanded && `rrui__expandable--expanded--${animation}`,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__expandable--expanded'      : expanded,\r\n\t\t\t\t\t\t'rrui__expandable--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t'rrui__expandable--right-aligned' : alignment === 'right',\r\n\t\t\t\t\t\t'rrui__expandable--upward'        : upward,\r\n\t\t\t\t\t\t'rrui__expandable--downward'      : !upward\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\t\t\t\t{ React.Children.map(children, (child) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn React.cloneElement(child,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclassName: classNames\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\tchild.props.className,\r\n\t\t\t\t\t\t\t'rrui__expandable__content',\r\n\t\t\t\t\t\t\tanimation && `rrui__expandable__content--${animation}`,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__expandable__content--expanded' : expanded\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}) }\r\n\r\n\t\t\t\t{/* The \"x\" button to hide the fullscreen expandable on mobile devices */}\r\n\t\t\t\t{ expanded && CloseButtonIcon &&\r\n\t\t\t\t\t<Close\r\n\t\t\t\t\t\tonClick={this.collapse}\r\n\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\tclassName={classNames('rrui__close--bottom-right', 'rrui__expandable__close')}>\r\n\t\t\t\t\t\t<CloseButtonIcon/>\r\n\t\t\t\t\t</Close>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\tif (onFocusOut) {\r\n\t\t\t// `<OnFocusOutOrTapOutside/>` sets `onBlur` on the `<div/>`.\r\n \t\t\t// `<Expandable/>` calls `.listenToTouches()` / `.stopListeningToTouches()` manually.\r\n\t\t\telement = (\r\n\t\t\t\t<OnFocusOutOrTapOutside\r\n\t\t\t\t\tref={this.onFocusOutRef}\r\n\t\t\t\t\tgetContainerNode={this.getContainerNode}\r\n\t\t\t\t\tgetTogglerNode={getTogglerNode}\r\n\t\t\t\t\tonFocusOut={this.onFocusOut}\r\n\t\t\t\t\tlistenToTouches={false}>\r\n\t\t\t\t\t{element}\r\n\t\t\t\t</OnFocusOutOrTapOutside>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn element\r\n\t}\r\n}"]}