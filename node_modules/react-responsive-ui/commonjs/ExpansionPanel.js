'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// For some weird reason, in Chrome, `setTimeout()` would lag up to a second (or more) behind.
// Turns out, Chrome developers have deprecated `setTimeout()` API entirely without asking anyone.
// Replacing `setTimeout()` with `requestAnimationFrame()` can work around that Chrome bug.
// https://github.com/bvaughn/react-virtualized/issues/722


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _requestAnimationFrameTimeout = require('request-animation-frame-timeout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DownArrow = function DownArrow(props) {
	return _react2.default.createElement(
		'svg',
		_extends({ viewBox: '0 0 12 7' }, props),
		_react2.default.createElement(
			'g',
			{ stroke: 'none', strokeWidth: '1', fill: 'none', fillRule: 'evenodd' },
			_react2.default.createElement('path', { fill: 'currentColor', d: 'M0.776785714,0 C0.995536808,0 1.17633857,0.0761808302 1.31919643,0.228544776 L6,4.93003731 L10.6808036,0.228544776 C10.8236614,0.0805340858 11.0044632,0.00652985075 11.2232143,0.00652985075 C11.4419654,0.00652985075 11.6227671,0.0805340858 11.765625,0.228544776 C11.9218758,0.380908722 12,0.568095905 12,0.79011194 C12,1.01648123 11.9218758,1.20584501 11.765625,1.35820896 L6.26116071,6.88899254 C6.18973179,6.96299788 6.10267908,7 6,7 C5.89732092,7 5.81026821,6.96299788 5.73883929,6.88899254 L0.234375,1.35820896 C0.0781242187,1.20149175 0,1.01321627 0,0.793376866 C0,0.573537458 0.0781242187,0.385261978 0.234375,0.228544776 C0.381697165,0.0761808302 0.562498929,0 0.776785714,0 Z' })
		)
	);
};

// The delay prevents Chrome from optimizing two immediate
// CSS style changes to a single one: first one setting
// <ExpansionPanel/>'s content `height` to `auto`,
// and the second one setting content `height` to `0`,
// so that the minimize animation is displayed.
var MINIMIZE_TIMER_DELAY = 20;

function ExpansionPanel(_ref, ref) {
	var isExpandedInitially = _ref.isExpandedInitially,
	    isExpandedExternallyControlled = _ref.isExpanded,
	    onToggle = _ref.onToggle,
	    title = _ref.title,
	    ariaLabel = _ref['aria-label'],
	    disabled = _ref.disabled,
	    ToggleIcon = _ref.toggleIcon,
	    toggleIconPlacement = _ref.toggleIconPlacement,
	    animationDuration = _ref.animationDuration,
	    style = _ref.style,
	    className = _ref.className,
	    children = _ref.children;

	var _isExpandedInitially = (isExpandedInitially === undefined ? isExpandedExternallyControlled : isExpandedInitially) || false;

	var _useState = (0, _react.useState)(_isExpandedInitially),
	    _useState2 = _slicedToArray(_useState, 2),
	    isExpanded = _useState2[0],
	    setExpanded = _useState2[1];

	var _useState3 = (0, _react.useState)(_isExpandedInitially ? undefined : 0),
	    _useState4 = _slicedToArray(_useState3, 2),
	    height = _useState4[0],
	    setHeight = _useState4[1];

	var _useState5 = (0, _react.useState)(),
	    _useState6 = _slicedToArray(_useState5, 2),
	    expandedHeight = _useState6[0],
	    setExpandedHeight = _useState6[1];

	var content = (0, _react.useRef)();
	var resetHeightTimer = (0, _react.useRef)();

	var toggle = (0, _react.useCallback)(function (expand) {
		if (expand === isExpanded) {
			// The expansion panel is already in the requested state. Do nothing.
			return;
		}
		if (expand === undefined) {
			expand = !isExpanded;
		}
		if (onToggle) {
			onToggle(expand);
		}
		(0, _requestAnimationFrameTimeout.clearTimeout)(resetHeightTimer.current);
		setExpanded(expand);
		setHeight(expand ? null : undefined);
		setExpandedHeight(expand ? null : content.current.scrollHeight);
	}, [isExpanded, onToggle]);

	var onToggleClick = (0, _react.useCallback)(function (event) {
		return toggle();
	}, [toggle]);

	var isFirstUseEffect = (0, _react.useRef)(true);
	var isFirstUseLayoutEffect = (0, _react.useRef)(true);

	(0, _react.useEffect)(function () {
		if (isFirstUseEffect.current) {
			return;
		}
		toggle(isExpanded);
	}, [isExpandedExternallyControlled]);

	(0, _react.useLayoutEffect)(function () {
		if (isFirstUseLayoutEffect.current) {
			return;
		}
		if (isExpanded) {
			// If `<ExpansionPanel/>` is being expanded
			// then measure its content height.
			if (height === null) {
				setHeight(content.current.scrollHeight);
			}
			resetHeightTimer.current = (0, _requestAnimationFrameTimeout.setTimeout)(function () {
				setHeight(undefined);
			}, animationDuration);
		} else {
			// Added a timeout here so that the browser doesn't
			// optimize two `setState()`s into a single one.
			resetHeightTimer.current = (0, _requestAnimationFrameTimeout.setTimeout)(function () {
				setHeight(0);
			}, MINIMIZE_TIMER_DELAY);
		}
	}, [isExpanded]);

	(0, _react.useEffect)(function () {
		isFirstUseEffect.current = false;
	}, []);

	(0, _react.useLayoutEffect)(function () {
		isFirstUseLayoutEffect.current = false;
		return function () {
			(0, _requestAnimationFrameTimeout.clearTimeout)(resetHeightTimer.current);
		};
	}, []);

	// There was a possibility of using `<details/>`/`<summary/>` elements here
	// but `<summary/>` can only contain any valid paragraph content
	// which means it can't contain lists, divs, paragraphs, etc.

	return _react2.default.createElement(
		'section',
		{
			style: style,
			className: (0, _classnames2.default)(className, 'rrui__expansion-panel', {
				'rrui__expansion-panel--expanded': isExpanded,
				'rrui__expansion-panel--toggle-icon-start': ToggleIcon && toggleIconPlacement === 'start',
				'rrui__expansion-panel--toggle-icon-end': ToggleIcon && toggleIconPlacement === 'end'
			}) },
		_react2.default.createElement(
			'header',
			{ style: HEADING_STYLE },
			_react2.default.createElement(
				'button',
				{
					ref: ref,
					type: 'button',
					onClick: onToggleClick,
					'aria-expanded': isExpanded ? true : false,
					'aria-label': ariaLabel,
					disabled: disabled,
					className: (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', 'rrui__expansion-panel__header') },
				ToggleIcon && toggleIconPlacement === 'start' && _react2.default.createElement(ToggleIcon, {
					'aria-hidden': true,
					className: (0, _classnames2.default)('rrui__expansion-panel__toggle-icon', 'rrui__expansion-panel__toggle-icon--start') }),
				_react2.default.createElement(
					'span',
					{ className: 'rrui__expansion-panel__heading' },
					title
				),
				ToggleIcon && toggleIconPlacement === 'end' && _react2.default.createElement(ToggleIcon, {
					'aria-hidden': true,
					className: (0, _classnames2.default)('rrui__expansion-panel__toggle-icon', 'rrui__expansion-panel__toggle-icon--end') })
			)
		),
		_react2.default.createElement(
			'div',
			{
				ref: content,
				'aria-hidden': !isExpanded,
				style: { height: isExpanded ? height === null ? 0 : height === undefined ? 'auto' : height + 'px' : height === undefined ? expandedHeight : 0 },
				className: 'rrui__expansion-panel__content-wrapper' },
			_react2.default.createElement(
				'div',
				{ className: 'rrui__expansion-panel__content' },
				children
			)
		)
	);
}

var HEADING_STYLE = {
	margin: 0
};

ExpansionPanel = _react2.default.forwardRef(ExpansionPanel);

ExpansionPanel.propTypes = {
	title: _propTypes2.default.string.isRequired,
	disabled: _propTypes2.default.bool,
	// `isExpanded` can be used for manual control.
	// For example, when there's a group of expansion panels
	// and only one of them should be expanded at any given time.
	isExpanded: _propTypes2.default.bool,
	isExpandedInitially: _propTypes2.default.bool,
	onToggle: _propTypes2.default.func,
	toggleIcon: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]).isRequired,
	toggleIconPlacement: _propTypes2.default.oneOf(['start', 'end']).isRequired,
	animationDuration: _propTypes2.default.number.isRequired,
	style: _propTypes2.default.object,
	className: _propTypes2.default.string
};

ExpansionPanel.defaultProps = {
	toggleIcon: DownArrow,
	toggleIconPlacement: 'start',
	animationDuration: 300
};

exports.default = ExpansionPanel;
//# sourceMappingURL=ExpansionPanel.js.map