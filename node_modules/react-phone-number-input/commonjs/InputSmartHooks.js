'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createInput = createInput;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react3 = require('input-format/react');

var _react4 = _interopRequireDefault(_react3);

var _core = require('libphonenumber-js/core');

var _inputValuePrefix = require('./inputValuePrefix');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // This is just a rewrite of `./InputSmart.js` using Hooks.
// `./InputSmart.js` wasn't rewritten in Hooks directly
// due to the legacy compatibility with older React versions.
//
// Plus the added support for `international` property.

/**
 * This input uses `input-format` library
 * for "smart" caret positioning.
 */
function createInput(defaultMetadata) {
	function InputSmart(_ref, ref) {
		var country = _ref.country,
		    international = _ref.international,
		    metadata = _ref.metadata,
		    rest = _objectWithoutProperties(_ref, ['country', 'international', 'metadata']);

		var format = (0, _react.useCallback)(function (value) {
			// "As you type" formatter.
			var formatter = new _core.AsYouType(country, metadata);
			var prefix = (0, _inputValuePrefix.getInputValuePrefix)(country, international, metadata);
			// Format the number.
			var text = formatter.input(prefix + value);
			var template = formatter.getTemplate();
			if (prefix) {
				text = (0, _inputValuePrefix.removeInputValuePrefix)(text, prefix);
				// `AsYouType.getTemplate()` can be `undefined`.
				if (template) {
					template = (0, _inputValuePrefix.removeInputValuePrefix)(template, prefix);
				}
			}
			return {
				text: text,
				template: template
			};
		}, [country, metadata]);
		return _react2.default.createElement(_react4.default, _extends({}, rest, {
			ref: ref,
			parse: _core.parsePhoneNumberCharacter,
			format: format }));
	}

	InputSmart = _react2.default.forwardRef(InputSmart);

	InputSmart.propTypes = {
		/**
   * A two-letter country code for formatting `value`
   * as a national phone number (e.g. `(800) 555 35 35`).
   * E.g. "US", "RU", etc.
   * If no `country` is passed then `value`
   * is formatted as an international phone number.
   * (e.g. `+7 800 555 35 35`)
   * Perhaps the `country` property should have been called `defaultCountry`
   * because if `value` is an international number then `country` is ignored.
   */
		country: _propTypes2.default.string,

		/**
   * If `country` property is passed along with `international={true}` property
   * then the phone number will be input in "international" format for that `country`
   * (without "country calling code").
   * For example, if `country="US"` property is passed to "without country select" input
   * then the phone number will be input in the "national" format for `US` (`(213) 373-4253`).
   * But if both `country="US"` and `international={true}` properties are passed then
   * the phone number will be input in the "international" format for `US` (`213 373 4253`)
   * (without "country calling code" `+1`).
   */
		international: _propTypes2.default.bool,

		/**
   * `libphonenumber-js` metadata.
   */
		metadata: _propTypes2.default.object.isRequired
	};

	InputSmart.defaultProps = {
		metadata: defaultMetadata
	};

	return InputSmart;
}

exports.default = createInput();
//# sourceMappingURL=InputSmartHooks.js.map