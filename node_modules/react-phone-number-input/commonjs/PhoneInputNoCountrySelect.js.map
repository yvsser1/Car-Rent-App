{"version":3,"sources":["../source/PhoneInputNoCountrySelect.js"],"names":["createInput","defaultMetadata","PhoneInput","ref","country","defaultCountry","useNationalFormatForDefaultCountryValue","value","onChange","metadata","smartCaret","international","rest","getInitialParsedInput","getParsedInputForValue","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","parsedInput","setParsedInput","valueForParsedInput","setValueForParsedInput","onParsedInputChange","slice","asYouType","input","phoneNumber","getNumber","number","InputComponent","forwardRef","propTypes","type","string","autoComplete","func","isRequired","bool","inputComponent","elementType","object","defaultProps","undefined","console","error","nationalNumber","formatNational"],"mappings":"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","file":"PhoneInputNoCountrySelect.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport InputSmart from './InputSmartHooks'\r\nimport InputBasic from './InputBasicHooks'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tmetadata,\r\n\t\tsmartCaret,\r\n\t\tinternational,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst getInitialParsedInput = () => getParsedInputForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// This is only used to detect `country` property change.\r\n\t\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t\t// This is only used to detect `defaultCountry` property change.\r\n\t\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t\t// `parsedInput` is the `value` passed to the `<input/>`.\r\n\t\tconst [parsedInput, setParsedInput] = useState(getInitialParsedInput())\r\n\t\t// This is only used to detect `value` property changes.\r\n\t\tconst [valueForParsedInput, setValueForParsedInput] = useState(value)\r\n\t\t// If `value` property has been changed externally\r\n\t\t// then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (value !== valueForParsedInput) {\r\n\t\t\t\tsetValueForParsedInput(value)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [value])\r\n\t\t// If the `country` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (country !== prevCountry) {\r\n\t\t\t\tsetPrevCountry(country)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [country])\r\n\t\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [defaultCountry])\r\n\t\t// Update the `value` after `valueForParsedInput` has been updated.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (valueForParsedInput !== value) {\r\n\t\t\t\tonChange(valueForParsedInput)\r\n\t\t\t}\r\n\t\t}, [valueForParsedInput])\r\n\t\tconst onParsedInputChange = useCallback((parsedInput) => {\r\n\t\t\tlet value\r\n\t\t\tif (country) {\r\n\t\t\t\t// Won't allow `+` in the beginning\r\n\t\t\t\t// when a `country` has been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] === '+') {\r\n\t\t\t\t\tparsedInput = parsedInput.slice(1)\r\n\t\t\t\t}\r\n\t\t\t} else if (!defaultCountry) {\r\n\t\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] !== '+') {\r\n\t\t\t\t\tparsedInput = '+' + parsedInput\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Convert `parsedInput` to `value`.\r\n\t\t\tif (parsedInput) {\r\n\t\t\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\t\t\tasYouType.input(\r\n\t\t\t\t\tcountry && international ?\r\n\t\t\t\t\t`+${getCountryCallingCode(country, metadata)}${parsedInput}` :\r\n\t\t\t\t\tparsedInput\r\n\t\t\t\t)\r\n\t\t\t\tconst phoneNumber = asYouType.getNumber()\r\n\t\t\t\t// If it's a \"possible\" incomplete phone number.\r\n\t\t\t\tif (phoneNumber) {\r\n\t\t\t\t\tvalue = phoneNumber.number\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetParsedInput(parsedInput)\r\n\t\t\tsetValueForParsedInput(value)\r\n\t\t}, [\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\tdefaultCountry,\r\n\t\t\tmetadata,\r\n\t\t\tsetParsedInput,\r\n\t\t\tsetValueForParsedInput\r\n\t\t])\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\t\treturn (\r\n\t\t\t<InputComponent\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tinternational={international}\r\n\t\t\t\tcountry={country || defaultCountry}\r\n\t\t\t\tvalue={parsedInput}\r\n\t\t\t\tonChange={onParsedInputChange} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The phone number (in E.164 format).\r\n\t\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (example: `(213) 373-4253`),\r\n\t\t * or as an international phone number without \"country calling code\"\r\n\t\t * if `international` property is passed (example: `213 373 4253`).\r\n\t\t * Example: \"US\".\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (example: `+1 213 373 4253`)\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t\t * The user can still input a phone number in international format.\r\n\t\t * Example: \"US\".\r\n\t\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t\t */\r\n\t\tdefaultCountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t\t * then the `value` will be formatted as a national phone number by default.\r\n\t\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to force international phone number format\r\n\t\t * (without \"country calling code\") when `country` is specified.\r\n\t\t */\r\n\t\t// international: false,\r\n\r\n\t\t/**\r\n\t\t * Prefer national format when formatting E.164 phone number `value`\r\n\t\t * corresponding to `defaultCountry`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getParsedInputForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n) {\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tconsole.error(`[react-phone-number-input] Phone number ${value} corresponds to country ${phoneNumber.country} but ${country} was specified instead.`)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"]}