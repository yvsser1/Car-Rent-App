{"version":3,"sources":["../source/InputSmartHooks.js"],"names":["createInput","defaultMetadata","InputSmart","ref","country","international","metadata","rest","format","value","formatter","prefix","text","input","template","getTemplate","forwardRef","propTypes","string","bool","object","isRequired","defaultProps"],"mappings":";;;;;;;;QAiBgBA,W,GAAAA,W;;AAXhB;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;6NAXA;AACA;AACA;AACA;AACA;;AASA;;;;AAIO,SAASA,WAAT,CAAqBC,eAArB,EACP;AACC,UAASC,UAAT,OAKGC,GALH,EAKQ;AAAA,MAJPC,OAIO,QAJPA,OAIO;AAAA,MAHPC,aAGO,QAHPA,aAGO;AAAA,MAFPC,QAEO,QAFPA,QAEO;AAAA,MADJC,IACI;;AACP,MAAMC,SAAS,wBAAY,UAACC,KAAD,EAAW;AACrC;AACA,OAAMC,YAAY,oBAAcN,OAAd,EAAuBE,QAAvB,CAAlB;AACA,OAAMK,SAAS,2CAAoBP,OAApB,EAA6BC,aAA7B,EAA4CC,QAA5C,CAAf;AACA;AACA,OAAIM,OAAOF,UAAUG,KAAV,CAAgBF,SAASF,KAAzB,CAAX;AACA,OAAIK,WAAWJ,UAAUK,WAAV,EAAf;AACA,OAAIJ,MAAJ,EAAY;AACXC,WAAO,8CAAuBA,IAAvB,EAA6BD,MAA7B,CAAP;AACA;AACA,QAAIG,QAAJ,EAAc;AACbA,gBAAW,8CAAuBA,QAAvB,EAAiCH,MAAjC,CAAX;AACA;AACD;AACD,UAAO;AACNC,cADM;AAENE;AAFM,IAAP;AAIA,GAlBc,EAkBZ,CAACV,OAAD,EAAUE,QAAV,CAlBY,CAAf;AAmBA,SACC,4DACKC,IADL;AAEC,QAAKJ,GAFN;AAGC,yCAHD;AAIC,WAAQK,MAJT,IADD;AAOA;;AAEDN,cAAa,gBAAMc,UAAN,CAAiBd,UAAjB,CAAb;;AAEAA,YAAWe,SAAX,GAAuB;AACtB;;;;;;;;;;AAUAb,WAAS,oBAAUc,MAXG;;AAatB;;;;;;;;;;AAUAb,iBAAe,oBAAUc,IAvBH;;AAyBtB;;;AAGAb,YAAU,oBAAUc,MAAV,CAAiBC;AA5BL,EAAvB;;AA+BAnB,YAAWoB,YAAX,GAA0B;AACzBhB,YAAUL;AADe,EAA1B;;AAIA,QAAOC,UAAP;AACA;;kBAEcF,a","file":"InputSmartHooks.js","sourcesContent":["// This is just a rewrite of `./InputSmart.js` using Hooks.\r\n// `./InputSmart.js` wasn't rewritten in Hooks directly\r\n// due to the legacy compatibility with older React versions.\r\n//\r\n// Plus the added support for `international` property.\r\n\r\nimport React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix'\r\n\r\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\r\nexport function createInput(defaultMetadata)\r\n{\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix(country, international, metadata)\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()"]}