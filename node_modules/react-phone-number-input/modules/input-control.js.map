{"version":3,"sources":["../source/input-control.js"],"names":["getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","migrateParsedInputForNewCountry","e164","trimNumber","getCountryForPartialE164Number","parseInput","get_country_from_possibly_incomplete_international_phone_number","compare_strings","strip_country_calling_code","get_national_significant_number_part","could_number_belong_to_country","phoneNumber","country","countries","includeInternationalOption","metadata","indexOf","undefined","length","country_names","country_select_options","map","value","label","sort","a","b","unshift","ZZ","formatNational","replace","previous_country","new_country","preferNationalFormat","number","partial_national_significant_number","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","slice","possibleLengths","partialE164Number","derived_country","input","prevInput","limitMaxLength","formatter","String","prototype","localeCompare","country_calling_prefix","Object","keys","country_calling_codes","country_calling_code","getNationalNumber","i"],"mappings":"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","file":"input-control.js","sourcesContent":["import {\r\n\tparsePhoneNumberFromString,\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata)\r\n{\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country)\r\n\t{\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0)\r\n\t{\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && !includeInternationalOption && countries && countries.length > 0)\r\n\t{\r\n\t\tcountry = countries[0]\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions(countries, country_names, includeInternationalOption)\r\n{\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst country_select_options = countries.map((country) =>\r\n\t({\r\n\t\tvalue : country,\r\n\t\tlabel : country_names[country]\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountry_select_options.sort((a, b) => compare_strings(a.label, b.label))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (includeInternationalOption)\r\n\t{\r\n\t\tcountry_select_options.unshift\r\n\t\t({\r\n\t\t\tlabel : country_names.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn country_select_options\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata)\r\n{\r\n\treturn parsePhoneNumberFromString(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber)\r\n{\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function migrateParsedInputForNewCountry\r\n(\r\n\tvalue,\r\n\tprevious_country,\r\n\tnew_country,\r\n\tmetadata,\r\n\tpreferNationalFormat\r\n)\r\n{\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!value) {\r\n\t\treturn value\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `value` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (new_country)\r\n\t{\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (value[0] === '+')\r\n\t\t{\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (preferNationalFormat)\r\n\t\t\t{\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\r\n\t\t\t\t// if (derived_country === new_country)\r\n\t\t\t\t// {\r\n\t\t\t\t// \treturn strip_country_calling_code(value, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (value.indexOf('+' + getCountryCallingCode(new_country, metadata)) === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn strip_country_calling_code(value, new_country, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return value.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\t// If the international phone number already contains\r\n\t\t\t// any country calling code then trim the country calling code part.\r\n\t\t\t// (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// `value` doesn't neccessarily belong to `previous_country`.\r\n\t\t\t// (e.g. if a user enters an international number\r\n\t\t\t//  not belonging to any of the reduced `countries` list).\r\n\t\t\tvalue = strip_country_calling_code(value, previous_country, metadata)\r\n\r\n\t\t\t// Prepend country calling code prefix\r\n\t\t\t// for the newly selected country.\r\n\t\t\treturn e164(value, new_country, metadata) || `+${getCountryCallingCode(new_country, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse\r\n\t{\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (value[0] !== '+')\r\n\t\t{\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\treturn e164(value, previous_country, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata)\r\n{\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+')\r\n\t{\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// If there are any digits then the `value` is returned as is.\r\n\t\treturn number\r\n\t}\r\n\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst partial_national_significant_number = get_national_significant_number_part(number, country, metadata)\r\n\r\n\tif (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number}`\r\n\t}\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata)\r\n{\r\n\tconst nationalSignificantNumberPart = get_national_significant_number_part(number, country, metadata)\r\n\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\tif (overflowDigitsCount > 0) {\r\n\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata)\r\n{\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.country(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.possibleLengths()[metadata.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number\r\n(\r\n\tpartialE164Number,\r\n\tcountry,\r\n\tcountries,\r\n\tincludeInternationalOption,\r\n\tmetadata\r\n)\r\n{\r\n\tif (partialE164Number === '+')\r\n\t{\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0)))\r\n\t{\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\tincludeInternationalOption &&\r\n\t\t!could_number_belong_to_country(partialE164Number, country, metadata))\r\n\t{\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\r\nexport function parseInput(\r\n\tinput,\r\n\tprevInput,\r\n\tcountry,\r\n\tcountries,\r\n\tincludeInternationalOption,\r\n\tlimitMaxLength,\r\n\tmetadata\r\n) {\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (input && country && limitMaxLength) {\r\n\t\tinput = trimNumber(input, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\tif (input && !country && input[0] !== '+') {\r\n\t\tinput = '+' + input\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!input && prevInput && prevInput[0] === '+') {\r\n\t\tcountry = undefined\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (input) {\r\n\t\tif (input[0] === '+') {\r\n\t\t\tif (input !== '+') {\r\n\t\t\t\tvalue = input\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(input, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tincludeInternationalOption,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function get_country_from_possibly_incomplete_international_phone_number(number, metadata)\r\n{\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// `001` is a special \"non-geograpical entity\" code\r\n\t// in Google's `libphonenumber` library.\r\n\tif (formatter.country === '001') {\r\n\t\treturn\r\n\t}\r\n\treturn formatter.country\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\r\nexport function compare_strings(a, b) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function strip_country_calling_code(number, country, metadata)\r\n{\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country)\r\n\t{\r\n\t\tconst country_calling_prefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < country_calling_prefix.length)\r\n\t\t{\r\n\t\t\tif (country_calling_prefix.indexOf(number) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (number.indexOf(country_calling_prefix) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn number.slice(country_calling_prefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes))\r\n\t{\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length)\r\n\t\t{\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function get_national_significant_number_part(number, country, metadata)\r\n{\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\r\n\t// Return the parsed partial national phone number.\r\n\treturn formatter.getNationalNumber()\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function could_number_belong_to_country(number, country, metadata)\r\n{\r\n\tconst country_calling_code = getCountryCallingCode(country, metadata)\r\n\r\n\tlet i = 0\r\n\twhile (i + 1 < number.length && i < country_calling_code.length)\r\n\t{\r\n\t\tif (number[i + 1] !== country_calling_code[i])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn true\r\n}"]}