'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _parse2 = require('../parse');

var _parse3 = _interopRequireDefault(_parse2);

var _inputControl = require('../input control');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // This is just `./ReactInput.js` rewritten in Hooks.

// Usage:
//
// <ReactInput
// 	value={this.state.phone}
// 	onChange={phone => this.setState({ phone })}
// 	parse={character => character}
// 	format={value => ({ text: value, template: 'xxxxxxxx' })}/>
//
function Input(_ref, ref) {
	var value = _ref.value,
	    parse = _ref.parse,
	    format = _ref.format,
	    InputComponent = _ref.inputComponent,
	    onChange = _ref.onChange,
	    onCut = _ref.onCut,
	    onPaste = _ref.onPaste,
	    onKeyDown = _ref.onKeyDown,
	    rest = _objectWithoutProperties(_ref, ['value', 'parse', 'format', 'inputComponent', 'onChange', 'onCut', 'onPaste', 'onKeyDown']);

	var ownRef = (0, _react.useRef)();
	ref = ref || ownRef;
	var _onChange = (0, _react.useCallback)(function (event) {
		return (0, _inputControl.onChange)(event, ref.current, parse, format, onChange);
	}, [ref, parse, format, onChange]);

	var _onPaste = (0, _react.useCallback)(function (event) {
		if (onPaste) {
			onPaste(event);
		}
		return (0, _inputControl.onPaste)(event, ref.current, parse, format, onChange);
	}, [ref, parse, format, onChange, onPaste]);

	var _onCut = (0, _react.useCallback)(function (event) {
		if (onCut) {
			onCut(event);
		}
		return (0, _inputControl.onCut)(event, ref.current, parse, format, onChange);
	}, [ref, parse, format, onChange, onCut]);

	var _onKeyDown = (0, _react.useCallback)(function (event) {
		if (onKeyDown) {
			onKeyDown(event);
		}
		return (0, _inputControl.onKeyDown)(event, ref.current, parse, format, onChange);
	}, [ref, parse, format, onChange, onKeyDown]);

	return _react2.default.createElement(InputComponent, _extends({}, rest, {
		ref: ref,
		value: format(isEmptyValue(value) ? '' : value).text,
		onKeyDown: _onKeyDown,
		onChange: _onChange,
		onPaste: _onPaste,
		onCut: _onCut }));
}

Input = _react2.default.forwardRef(Input);

Input.propTypes = {
	// Parses a single characher of `<input/>` text.
	parse: _propTypes2.default.func.isRequired,

	// Formats `value` into `<input/>` text.
	format: _propTypes2.default.func.isRequired,

	// Renders `<input/>` by default.
	inputComponent: _propTypes2.default.elementType.isRequired,

	// `<input/>` `type` attribute.
	type: _propTypes2.default.string.isRequired,

	// Is parsed from <input/> text.
	value: _propTypes2.default.string,

	// This handler is called each time `<input/>` text is changed.
	onChange: _propTypes2.default.func.isRequired,

	// Passthrough
	onKeyDown: _propTypes2.default.func,
	onCut: _propTypes2.default.func,
	onPaste: _propTypes2.default.func
};

Input.defaultProps = {
	// Renders `<input/>` by default.
	inputComponent: 'input',

	// `<input/>` `type` attribute.
	type: 'text'
};

exports.default = Input;


function isEmptyValue(value) {
	return value === undefined || value === null;
}
//# sourceMappingURL=Input.js.map