{"version":3,"sources":["../../source/react/Input.js"],"names":["Input","ref","value","parse","format","InputComponent","inputComponent","onChange","onCut","onPaste","onKeyDown","rest","ownRef","_onChange","event","current","_onPaste","_onCut","_onKeyDown","isEmptyValue","text","React","forwardRef","propTypes","PropTypes","func","isRequired","elementType","type","string","defaultProps","undefined"],"mappings":"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","file":"Input.js","sourcesContent":["// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport _parse from '../parse'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonCut as onInputCut,\r\n\tonPaste as onInputPaste,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../input control'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonCut,\r\n\tonPaste,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst ownRef = useRef()\r\n\tref = ref || ownRef\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange])\r\n\r\n\tconst _onPaste = useCallback((event) => {\r\n\t\tif (onPaste) {\r\n\t\t\tonPaste(event)\r\n\t\t}\r\n\t\treturn onInputPaste(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onPaste])\r\n\r\n\tconst _onCut = useCallback((event) => {\r\n\t\tif (onCut) {\r\n\t\t\tonCut(event)\r\n\t\t}\r\n\t\treturn onInputCut(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onCut])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}\r\n\t\t\tonPaste={_onPaste}\r\n\t\t\tonCut={_onCut} />\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}"]}